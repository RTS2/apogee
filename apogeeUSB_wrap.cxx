/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#       endif
#endif
#else
#       define SWIGEXPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef struct swig_type_info {
  char  *name;                 
  void *(*converter)(void *);
  char  *str;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE
SWIGEXPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGEXPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGEXPORT(void *) SWIG_TypeCast(swig_type_info *, void *);
#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  while (s) {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    s = s->next;
  }
  return 0;
}

/* Cast a pointer (needed for C++ inheritance */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(void *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

#endif

#ifdef __cplusplus
}
#endif




/*
 * $Header: /cvs/projects/SWIG/Lib/tcl/swigtcl8.swg,v 1.8 2000/09/02 16:25:29 beazley Exp $
 * 
 * swigtcl8.swg
 */

#include <tcl.h>
#include <stdlib.h>
#include <stdarg.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef SWIG_NOINCLUDE
SWIGEXPORT(int) SWIG_ConvertPtrFromString(Tcl_Interp *, char *, void **, swig_type_info *);
SWIGEXPORT(int) SWIG_ConvertPtr(Tcl_Interp *, Tcl_Obj *, void **, swig_type_info *);
SWIGEXPORT(void) SWIG_MakePtr(char *, void *, swig_type_info *);
SWIGEXPORT(Tcl_Obj *) SWIG_NewPointerObj(void *, swig_type_info *);
SWIGEXPORT(int) SWIG_GetArgs(Tcl_Interp *, int, Tcl_Obj *CONST [], const char *, ...);
SWIGEXPORT(char *) SWIG_PointerTypeFromString(char *c);
#else

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtrFromString(Tcl_Interp *interp, char *c, void **ptr, swig_type_info *ty)
{
  unsigned long p;
  register int d;
  swig_type_info *tc;
  p = 0;
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return TCL_OK;
    Tcl_SetResult(interp,"Type error. Expected a pointer", TCL_STATIC);
    return TCL_ERROR;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if ((d >= '0') && (d <= '9'))
      p = (p << 4) + (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      p = (p << 4) + (d - ('a'-10));
    else
      break; 
    c++;
  }
  *ptr = (void *) p;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) {
      Tcl_SetResult(interp,"Type error. Expected ", TCL_STATIC);
      Tcl_AppendElement(interp, ty->name);
      return TCL_ERROR;
    }
    *ptr = SWIG_TypeCast(tc,(void *)p);
  }
  return TCL_OK;
}


/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty)
{
  return SWIG_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty);
}


/* Convert a pointer value */
SWIGRUNTIME(char *)
SWIG_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while (d = *c) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Take a pointer and convert it to a string */
SWIGRUNTIME(void) 
SWIG_MakePtr(char *c, void *ptr, swig_type_info *ty) {
  static char hex[17] = "0123456789abcdef";
  unsigned long p, s;
  char result[24], *r; 
  r = result;
  p = (unsigned long) ptr;
  if (p > 0) {
    while (p > 0) {
      s = p & 0xf;
      *(r++) = hex[s];
      p = p >> 4;
    }
    *r = '_';
    while (r >= result)
      *(c++) = *(r--);
    strcpy (c, ty->name);
  } else {
    strcpy (c, "NULL");
  }
}

/* Create a new pointer object */
SWIGRUNTIME(Tcl_Obj *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type) {
  char result[256];
  Tcl_Obj *robj;
  SWIG_MakePtr(result,ptr,type);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

/* Get arguments */
SWIGRUNTIME(int)
SWIG_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...)
{
  int        argno = 0, opt = 0, tempi;
  int        us = 0;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
	Tcl_SetResult(interp,"Wrong # args. ", TCL_STATIC);
	goto argerror;
      } else {
	va_end(ap);
	return TCL_OK;
      }
    }
    vptr = va_arg(ap,void *);
    if (vptr) {
      us = 0;
      if (*c == 'u') {
	us = 1;
	c++;
      }
      switch(*c) {
      case 'i':
      case 'l':
      case 'h':
      case 'b':
	if (Tcl_GetIntFromObj(interp,objv[argno+1],&tempi) != TCL_OK) goto argerror;
	if (*c == 'i') *((int *)vptr) = tempi;
	else if (*c == 'l') *((long *)vptr) = tempi;
	else if (*c == 'h') *((short*)vptr) = tempi;
	else if (*c == 'b') *((unsigned char *)vptr) = tempi;
	break;
      case 'f':
      case 'd':
	if (Tcl_GetDoubleFromObj(interp,objv[argno+1],&tempd) != TCL_OK) goto argerror;
	if (*c == 'f') *((float *) vptr) = tempd;
	else if (*c == 'd') *((double*) vptr) = tempd;
	break;
      case 's':
	if (*(c+1) == '#') {
	  int *vlptr = (int *) va_arg(ap, void *);
	  *((char **) vptr) = Tcl_GetStringFromObj(objv[argno+1], vlptr);
	  c++;
	} else {
	  *((char **)vptr) = Tcl_GetStringFromObj(objv[argno+1],NULL);
	}
	break;
      case 'c':
	*((char *)vptr) = *(Tcl_GetStringFromObj(objv[argno+1],NULL));
	break;
      case 'p':
	ty = (swig_type_info *) va_arg(ap, void *);
	if (SWIG_ConvertPtr(interp, objv[argno+1], (void **) vptr, ty) == TCL_ERROR) goto argerror;
	break;
      case 'o':
	*((Tcl_Obj **)vptr) = objv[argno+1];
	break;
      default:
	break;
      }
    }
  }
  if ((objc-1) > argno) {
    Tcl_SetResult(interp,"Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;
  
 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno);
    Tcl_AppendResult(interp,strchr(fmt,':'), " argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#endif

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_CApnCamera swig_types[0] 
static swig_type_info *swig_types[2];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Apogee_usb_Init
#define SWIG_name    "apogee_usb"
#define SWIG_prefix  ""
#define SWIG_version "0.0"
     
#include "ApnCamera.h" 

#ifdef __cplusplus
extern "C" {
#endif
static int
_wrap_new_CApnCamera(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_CApnCamera ") == TCL_ERROR) SWIG_fail;
    result = (CApnCamera *)new CApnCamera();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_delete_CApnCamera(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":delete_CApnCamera self ") == TCL_ERROR) SWIG_fail;
    delete arg1;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_InitDriver(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned long arg2 ;
    unsigned short arg3 ;
    unsigned long arg4 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_InitDriver self CamIdA CamIdB Option ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->InitDriver(arg2,arg3,arg4);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_CloseDriver(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_CloseDriver self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->CloseDriver();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_PreStartExpose(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_PreStartExpose self BitsPerPixel ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->PreStartExpose(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_PostStopExposure(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_PostStopExposure self DigitizeData ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->PostStopExposure(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_sensorInfo(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_sensorInfo self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->sensorInfo();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_GetImageData(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short *arg2 = (unsigned short *) 0 ;
    unsigned short *arg3 = 0 ;
    unsigned short *arg4 = 0 ;
    unsigned long *arg5 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_GetImageData self pImageData Width Height Count ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->GetImageData(arg2,*arg3,*arg4,*arg5);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_GetLineData(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short *arg2 = (unsigned short *) 0 ;
    unsigned short *arg3 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_GetLineData self pLineBuffer Size ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->GetLineData(arg2,*arg3);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_Read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    unsigned short *arg3 = 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_Read self reg val ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->Read(arg2,*arg3);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_Write(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_Write self reg val ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->Write(arg2,arg3);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_WriteMultiSRMD(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    unsigned short *arg3 ;
    unsigned short arg4 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_WriteMultiSRMD self reg val count ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->WriteMultiSRMD(arg2,arg3,arg4);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_WriteMultiMRMD(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short *arg2 ;
    unsigned short *arg3 ;
    unsigned short arg4 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_WriteMultiMRMD self reg val count ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->WriteMultiMRMD(arg2,arg3,arg4);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_QueryStatusRegs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short *arg2 = 0 ;
    unsigned short *arg3 = 0 ;
    unsigned short *arg4 = 0 ;
    unsigned short *arg5 = 0 ;
    unsigned short *arg6 = 0 ;
    unsigned short *arg7 = 0 ;
    unsigned short *arg8 = 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_QueryStatusRegs self StatusReg HeatsinkTempReg CcdTempReg CoolerDriveReg VoltageReg TdiCounter SequenceCounter ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->QueryStatusRegs(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_InitDefaults(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_InitDefaults self ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->InitDefaults();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_Expose(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    bool arg3 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_Expose self Duration Light ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->Expose(arg2,arg3);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_BufferImage(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    char *arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_BufferImage self bufferName ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->BufferImage(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_BufferDriftScan(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    char *arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_BufferDriftScan self bufferName delay rowCount nblock npipe ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->BufferDriftScan(arg2,arg3,arg4,arg5,arg6);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_StopExposure(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_StopExposure self DigitizeData ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->StopExposure(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_ResetSystem(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_ResetSystem self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->ResetSystem();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_PauseTimer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_PauseTimer self PauseState ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->PauseTimer(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_SetNetworkTransferMode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_SetNetworkTransferMode self TransferMode ") == TCL_ERROR) SWIG_fail;
    (arg1)->SetNetworkTransferMode(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_GetExposurePixelsH(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_GetExposurePixelsH self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short)(arg1)->GetExposurePixelsH();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_GetExposurePixelsV(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_GetExposurePixelsV self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short)(arg1)->GetExposurePixelsV();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_Present(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_Present self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_Present();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_FirmwareVersion(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_FirmwareVersion self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short)(arg1)->read_FirmwareVersion();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_ShutterState(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_ShutterState self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_ShutterState();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_DisableShutter(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_DisableShutter self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_DisableShutter();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_DisableShutter(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_DisableShutter self DisableShutter ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_DisableShutter(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_ForceShutterOpen(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_ForceShutterOpen self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_ForceShutterOpen();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_ForceShutterOpen(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_ForceShutterOpen self ForceShutterOpen ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_ForceShutterOpen(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_ShutterAmpControl(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_ShutterAmpControl self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_ShutterAmpControl();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_ShutterAmpControl(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_ShutterAmpControl self ShutterAmpControl ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_ShutterAmpControl(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_ExternalIoReadout(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_ExternalIoReadout self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_ExternalIoReadout();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_ExternalIoReadout(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_ExternalIoReadout self ExternalIoReadout ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_ExternalIoReadout(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_FastSequence(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_FastSequence self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_FastSequence();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_FastSequence(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_FastSequence self FastSequence ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_FastSequence(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_CameraMode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_CameraMode self ") == TCL_ERROR) SWIG_fail;
    result = (int)(arg1)->read_CameraMode();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_CameraMode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_CameraMode self CameraMode ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_CameraMode(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_DataBits(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_DataBits self BitResolution ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_DataBits(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_ImagingStatus(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_ImagingStatus self ") == TCL_ERROR) SWIG_fail;
    result = (int)(arg1)->read_ImagingStatus();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_LedMode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_LedMode self ") == TCL_ERROR) SWIG_fail;
    result = (int)(arg1)->read_LedMode();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_LedMode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_LedMode self LedMode ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_LedMode(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_LedState(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_LedState self LedId ") == TCL_ERROR) SWIG_fail;
    result = (int)(arg1)->read_LedState(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_LedState(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    int arg3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_LedState self LedId LedState ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_LedState(arg2,arg3);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_CoolerEnable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_CoolerEnable self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_CoolerEnable();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_CoolerEnable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_CoolerEnable self CoolerEnable ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_CoolerEnable(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_CoolerStatus(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_CoolerStatus self ") == TCL_ERROR) SWIG_fail;
    result = (int)(arg1)->read_CoolerStatus();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_CoolerSetPoint(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_CoolerSetPoint self ") == TCL_ERROR) SWIG_fail;
    result = (double)(arg1)->read_CoolerSetPoint();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_CoolerSetPoint(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_CoolerSetPoint self SetPoint ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_CoolerSetPoint(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_CoolerBackoffPoint(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_CoolerBackoffPoint self ") == TCL_ERROR) SWIG_fail;
    result = (double)(arg1)->read_CoolerBackoffPoint();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_CoolerBackoffPoint(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_CoolerBackoffPoint self BackoffPoint ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_CoolerBackoffPoint(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_CoolerDrive(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_CoolerDrive self ") == TCL_ERROR) SWIG_fail;
    result = (double)(arg1)->read_CoolerDrive();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_TempCCD(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_TempCCD self ") == TCL_ERROR) SWIG_fail;
    result = (double)(arg1)->read_TempCCD();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_TempHeatsink(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_TempHeatsink self ") == TCL_ERROR) SWIG_fail;
    result = (double)(arg1)->read_TempHeatsink();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_FanMode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_FanMode self ") == TCL_ERROR) SWIG_fail;
    result = (int)(arg1)->read_FanMode();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_FanMode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_FanMode self FanMode ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_FanMode(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_RoiBinningH(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_RoiBinningH self BinningH ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_RoiBinningH(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_RoiBinningV(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_RoiBinningV self BinningV ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_RoiBinningV(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_RoiPixelsV(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_RoiPixelsV self PixelsV ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_RoiPixelsV(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_RoiStartY(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_RoiStartY self StartY ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_RoiStartY(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_OverscanColumns(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_OverscanColumns self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short)(arg1)->read_OverscanColumns();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_ShutterStrobePosition(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_ShutterStrobePosition self ") == TCL_ERROR) SWIG_fail;
    result = (double)(arg1)->read_ShutterStrobePosition();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_ShutterStrobePosition(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_ShutterStrobePosition self Position ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_ShutterStrobePosition(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_ShutterStrobePeriod(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_ShutterStrobePeriod self ") == TCL_ERROR) SWIG_fail;
    result = (double)(arg1)->read_ShutterStrobePeriod();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_ShutterStrobePeriod(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_ShutterStrobePeriod self Period ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_ShutterStrobePeriod(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_SequenceDelay(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_SequenceDelay self ") == TCL_ERROR) SWIG_fail;
    result = (double)(arg1)->read_SequenceDelay();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_SequenceDelay(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_SequenceDelay self Delay ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_SequenceDelay(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_VariableSequenceDelay(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_VariableSequenceDelay self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_VariableSequenceDelay();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_VariableSequenceDelay(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_VariableSequenceDelay self VariableSequenceDelay ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_VariableSequenceDelay(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_ImageCount(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_ImageCount self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short)(arg1)->read_ImageCount();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_ImageCount(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_ImageCount self Count ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_ImageCount(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_SequenceCounter(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_SequenceCounter self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short)(arg1)->read_SequenceCounter();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_TDICounter(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_TDICounter self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short)(arg1)->read_TDICounter();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_TDIRows(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_TDIRows self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short)(arg1)->read_TDIRows();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_TDIRows(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_TDIRows self TdiRows ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_TDIRows(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_TDIRate(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_TDIRate self ") == TCL_ERROR) SWIG_fail;
    result = (double)(arg1)->read_TDIRate();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_TDIRate(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_TDIRate self TdiRate ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_TDIRate(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_IoPortAssignment(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_IoPortAssignment self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short)(arg1)->read_IoPortAssignment();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_IoPortAssignment(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_IoPortAssignment self IoPortAssignment ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_IoPortAssignment(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_IoPortDirection(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_IoPortDirection self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short)(arg1)->read_IoPortDirection();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_IoPortDirection(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_IoPortDirection self IoPortDirection ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_IoPortDirection(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_IoPortData(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_IoPortData self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short)(arg1)->read_IoPortData();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_IoPortData(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_IoPortData self IoPortData ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_IoPortData(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_TwelveBitGain(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_TwelveBitGain self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short)(arg1)->read_TwelveBitGain();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_TwelveBitGain(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_TwelveBitGain self TwelveBitGain ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_TwelveBitGain(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_InputVoltage(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_InputVoltage self ") == TCL_ERROR) SWIG_fail;
    result = (double)(arg1)->read_InputVoltage();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_AvailableMemory(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_AvailableMemory self ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->read_AvailableMemory();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_MaxExposureTime(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_MaxExposureTime self ") == TCL_ERROR) SWIG_fail;
    result = (double)(arg1)->read_MaxExposureTime();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_NetworkTransferMode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_NetworkTransferMode self ") == TCL_ERROR) SWIG_fail;
    result = (int)(arg1)->read_NetworkTransferMode();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_NetworkTransferMode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_NetworkTransferMode self TransferMode ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_NetworkTransferMode(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_read_TestLedBrightness(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_read_TestLedBrightness self ") == TCL_ERROR) SWIG_fail;
    result = (double)(arg1)->read_TestLedBrightness();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_write_TestLedBrightness(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_write_TestLedBrightness self TestLedBrightness ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_TestLedBrightness(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_ImageReady(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_ImageReady self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->ImageReady();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_SignalImagingDone(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_SignalImagingDone self ") == TCL_ERROR) SWIG_fail;
    (arg1)->SignalImagingDone();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_CameraInterface_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_CameraInterface_set self m_CameraInterface ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_CameraInterface = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_CameraInterface_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_CameraInterface_get self ") == TCL_ERROR) SWIG_fail;
    result = (int) ((arg1)->m_CameraInterface);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_ApnSensorInfo_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    CApnCamData *arg2 = (CApnCamData *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_ApnSensorInfo_set self m_ApnSensorInfo ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ApnSensorInfo = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_ApnSensorInfo_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    CApnCamData *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_ApnSensorInfo_get self ") == TCL_ERROR) SWIG_fail;
    result = (CApnCamData *) ((arg1)->m_ApnSensorInfo);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_RoiStartX_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_RoiStartX_set self m_RoiStartX ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_RoiStartX = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_RoiStartX_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_RoiStartX_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_RoiStartX);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_RoiStartY_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_RoiStartY_set self m_RoiStartY ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_RoiStartY = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_RoiStartY_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_RoiStartY_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_RoiStartY);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_RoiPixelsH_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_RoiPixelsH_set self m_RoiPixelsH ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_RoiPixelsH = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_RoiPixelsH_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_RoiPixelsH_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_RoiPixelsH);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_RoiPixelsV_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_RoiPixelsV_set self m_RoiPixelsV ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_RoiPixelsV = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_RoiPixelsV_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_RoiPixelsV_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_RoiPixelsV);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_RoiBinningH_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_RoiBinningH_set self m_RoiBinningH ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_RoiBinningH = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_RoiBinningH_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_RoiBinningH_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_RoiBinningH);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_RoiBinningV_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_RoiBinningV_set self m_RoiBinningV ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_RoiBinningV = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_RoiBinningV_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_RoiBinningV_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_RoiBinningV);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_DigitizeOverscan_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_DigitizeOverscan_set self m_DigitizeOverscan ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_DigitizeOverscan = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_DigitizeOverscan_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_DigitizeOverscan_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_DigitizeOverscan);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_DataBits_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_DataBits_set self m_DataBits ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_DataBits = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_DataBits_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_DataBits_get self ") == TCL_ERROR) SWIG_fail;
    result = (int) ((arg1)->m_DataBits);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_LoadVerticalPattern(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_LoadVerticalPattern self ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->LoadVerticalPattern();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_LoadClampPattern(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_LoadClampPattern self ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->LoadClampPattern();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_LoadSkipPattern(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_LoadSkipPattern self ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->LoadSkipPattern();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_LoadRoiPattern(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_LoadRoiPattern self Binning ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->LoadRoiPattern(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_WriteHorizontalPattern(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    APN_HPATTERN_FILE *arg2 = (APN_HPATTERN_FILE *) 0 ;
    unsigned short arg3 ;
    unsigned short arg4 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_WriteHorizontalPattern self Pattern reg binning ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->WriteHorizontalPattern(arg2,arg3,arg4);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_InitTwelveBitAD(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_InitTwelveBitAD self ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->InitTwelveBitAD();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_WriteTwelveBitOffset(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_WriteTwelveBitOffset self ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->WriteTwelveBitOffset();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_UpdateGeneralStatus(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_UpdateGeneralStatus self ") == TCL_ERROR) SWIG_fail;
    (arg1)->UpdateGeneralStatus();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_ResetVerticalArrays_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_ResetVerticalArrays_set self m_ResetVerticalArrays ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ResetVerticalArrays = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_ResetVerticalArrays_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_ResetVerticalArrays_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_ResetVerticalArrays);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtCameraMode_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtCameraMode_set self m_pvtCameraMode ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtCameraMode = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtCameraMode_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtCameraMode_get self ") == TCL_ERROR) SWIG_fail;
    result = (int) ((arg1)->m_pvtCameraMode);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtNetworkTransferMode_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtNetworkTransferMode_set self m_pvtNetworkTransferMode ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtNetworkTransferMode = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtNetworkTransferMode_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtNetworkTransferMode_get self ") == TCL_ERROR) SWIG_fail;
    result = (int) ((arg1)->m_pvtNetworkTransferMode);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtImageCount_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtImageCount_set self m_pvtImageCount ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtImageCount = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtImageCount_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtImageCount_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_pvtImageCount);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtTDIRows_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtTDIRows_set self m_pvtTDIRows ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtTDIRows = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtTDIRows_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtTDIRows_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_pvtTDIRows);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtTDIRate_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtTDIRate_set self m_pvtTDIRate ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtTDIRate = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtTDIRate_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtTDIRate_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_pvtTDIRate);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtSequenceDelay_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtSequenceDelay_set self m_pvtSequenceDelay ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtSequenceDelay = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtSequenceDelay_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtSequenceDelay_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_pvtSequenceDelay);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtShutterStrobePosition_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtShutterStrobePosition_set self m_pvtShutterStrobePosition ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtShutterStrobePosition = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtShutterStrobePosition_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtShutterStrobePosition_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_pvtShutterStrobePosition);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtShutterStrobePeriod_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtShutterStrobePeriod_set self m_pvtShutterStrobePeriod ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtShutterStrobePeriod = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtShutterStrobePeriod_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtShutterStrobePeriod_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_pvtShutterStrobePeriod);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtExposurePixelsH_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtExposurePixelsH_set self m_pvtExposurePixelsH ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtExposurePixelsH = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtExposurePixelsH_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtExposurePixelsH_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_pvtExposurePixelsH);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtExposurePixelsV_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtExposurePixelsV_set self m_pvtExposurePixelsV ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtExposurePixelsV = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtExposurePixelsV_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtExposurePixelsV_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_pvtExposurePixelsV);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtTwelveBitGain_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtTwelveBitGain_set self m_pvtTwelveBitGain ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtTwelveBitGain = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtTwelveBitGain_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtTwelveBitGain_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_pvtTwelveBitGain);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtLedMode_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtLedMode_set self m_pvtLedMode ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtLedMode = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtLedMode_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtLedMode_get self ") == TCL_ERROR) SWIG_fail;
    result = (int) ((arg1)->m_pvtLedMode);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtLedStateA_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtLedStateA_set self m_pvtLedStateA ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtLedStateA = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtLedStateA_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtLedStateA_get self ") == TCL_ERROR) SWIG_fail;
    result = (int) ((arg1)->m_pvtLedStateA);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtLedStateB_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtLedStateB_set self m_pvtLedStateB ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtLedStateB = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtLedStateB_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtLedStateB_get self ") == TCL_ERROR) SWIG_fail;
    result = (int) ((arg1)->m_pvtLedStateB);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtCoolerEnable_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtCoolerEnable_set self m_pvtCoolerEnable ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtCoolerEnable = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtCoolerEnable_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtCoolerEnable_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_pvtCoolerEnable);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtFanMode_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtFanMode_set self m_pvtFanMode ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtFanMode = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtFanMode_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtFanMode_get self ") == TCL_ERROR) SWIG_fail;
    result = (int) ((arg1)->m_pvtFanMode);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtCoolerBackoffPoint_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtCoolerBackoffPoint_set self m_pvtCoolerBackoffPoint ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtCoolerBackoffPoint = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtCoolerBackoffPoint_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtCoolerBackoffPoint_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_pvtCoolerBackoffPoint);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtCoolerStatus_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtCoolerStatus_set self m_pvtCoolerStatus ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtCoolerStatus = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtCoolerStatus_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtCoolerStatus_get self ") == TCL_ERROR) SWIG_fail;
    result = (int) ((arg1)->m_pvtCoolerStatus);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtImagingStatus_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtImagingStatus_set self m_pvtImagingStatus ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtImagingStatus = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtImagingStatus_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtImagingStatus_get self ") == TCL_ERROR) SWIG_fail;
    result = (int) ((arg1)->m_pvtImagingStatus);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtShutterState_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtShutterState_set self m_pvtShutterState ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtShutterState = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtShutterState_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtShutterState_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_pvtShutterState);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtImageInProgress_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtImageInProgress_set self m_pvtImageInProgress ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtImageInProgress = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtImageInProgress_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtImageInProgress_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_pvtImageInProgress);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtImageReady_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtImageReady_set self m_pvtImageReady ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtImageReady = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtImageReady_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtImageReady_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_pvtImageReady);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtStatusReg_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtStatusReg_set self m_pvtStatusReg ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtStatusReg = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtStatusReg_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtStatusReg_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_pvtStatusReg);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtCoolerDrive_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtCoolerDrive_set self m_pvtCoolerDrive ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtCoolerDrive = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtCoolerDrive_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtCoolerDrive_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_pvtCoolerDrive);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtCurrentHeatsinkTemp_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtCurrentHeatsinkTemp_set self m_pvtCurrentHeatsinkTemp ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtCurrentHeatsinkTemp = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtCurrentHeatsinkTemp_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtCurrentHeatsinkTemp_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_pvtCurrentHeatsinkTemp);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtCurrentCcdTemp_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtCurrentCcdTemp_set self m_pvtCurrentCcdTemp ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtCurrentCcdTemp = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtCurrentCcdTemp_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtCurrentCcdTemp_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_pvtCurrentCcdTemp);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtInputVoltage_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtInputVoltage_set self m_pvtInputVoltage ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtInputVoltage = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtInputVoltage_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtInputVoltage_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_pvtInputVoltage);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtIoPortAssignment_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtIoPortAssignment_set self m_pvtIoPortAssignment ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtIoPortAssignment = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtIoPortAssignment_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtIoPortAssignment_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_pvtIoPortAssignment);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtIoPortDirection_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtIoPortDirection_set self m_pvtIoPortDirection ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_pvtIoPortDirection = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_pvtIoPortDirection_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_pvtIoPortDirection_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_pvtIoPortDirection);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_Sensor_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    char *arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_Sensor_set self m_Sensor ") == TCL_ERROR) SWIG_fail;
    {
        if (arg2) strncpy(arg1->m_Sensor,arg2,20);
        else arg1->m_Sensor[0] = 0;
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_Sensor_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    char *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_Sensor_get self ") == TCL_ERROR) SWIG_fail;
    result = (char *)(char *) ((arg1)->m_Sensor);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_CameraModel_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    char *arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_CameraModel_set self m_CameraModel ") == TCL_ERROR) SWIG_fail;
    {
        if (arg2) strncpy(arg1->m_CameraModel,arg2,20);
        else arg1->m_CameraModel[0] = 0;
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_CameraModel_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    char *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_CameraModel_get self ") == TCL_ERROR) SWIG_fail;
    result = (char *)(char *) ((arg1)->m_CameraModel);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_CameraId_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_CameraId_set self m_CameraId ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_CameraId = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_CameraId_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_CameraId_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_CameraId);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_InterlineCCD_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_InterlineCCD_set self m_InterlineCCD ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_InterlineCCD = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_InterlineCCD_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_InterlineCCD_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_InterlineCCD);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_SupportsSerialA_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_SupportsSerialA_set self m_SupportsSerialA ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_SupportsSerialA = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_SupportsSerialA_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_SupportsSerialA_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_SupportsSerialA);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_SupportsSerialB_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_SupportsSerialB_set self m_SupportsSerialB ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_SupportsSerialB = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_SupportsSerialB_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_SupportsSerialB_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_SupportsSerialB);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_SensorTypeCCD_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_SensorTypeCCD_set self m_SensorTypeCCD ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_SensorTypeCCD = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_SensorTypeCCD_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_SensorTypeCCD_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_SensorTypeCCD);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_TotalColumns_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_TotalColumns_set self m_TotalColumns ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_TotalColumns = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_TotalColumns_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_TotalColumns_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_TotalColumns);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_ImagingColumns_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_ImagingColumns_set self m_ImagingColumns ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ImagingColumns = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_ImagingColumns_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_ImagingColumns_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_ImagingColumns);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_ClampColumns_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_ClampColumns_set self m_ClampColumns ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ClampColumns = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_ClampColumns_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_ClampColumns_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_ClampColumns);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_PreRoiSkipColumns_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_PreRoiSkipColumns_set self m_PreRoiSkipColumns ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_PreRoiSkipColumns = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_PreRoiSkipColumns_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_PreRoiSkipColumns_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_PreRoiSkipColumns);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_PostRoiSkipColumns_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_PostRoiSkipColumns_set self m_PostRoiSkipColumns ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_PostRoiSkipColumns = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_PostRoiSkipColumns_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_PostRoiSkipColumns_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_PostRoiSkipColumns);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_OverscanColumns_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_OverscanColumns_set self m_OverscanColumns ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_OverscanColumns = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_OverscanColumns_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_OverscanColumns_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_OverscanColumns);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_TotalRows_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_TotalRows_set self m_TotalRows ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_TotalRows = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_TotalRows_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_TotalRows_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_TotalRows);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_ImagingRows_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_ImagingRows_set self m_ImagingRows ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ImagingRows = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_ImagingRows_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_ImagingRows_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_ImagingRows);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_UnderscanRows_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_UnderscanRows_set self m_UnderscanRows ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_UnderscanRows = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_UnderscanRows_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_UnderscanRows_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_UnderscanRows);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_OverscanRows_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_OverscanRows_set self m_OverscanRows ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_OverscanRows = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_OverscanRows_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_OverscanRows_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_OverscanRows);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_VFlushBinning_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_VFlushBinning_set self m_VFlushBinning ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_VFlushBinning = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_VFlushBinning_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_VFlushBinning_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_VFlushBinning);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_HFlushDisable_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_HFlushDisable_set self m_HFlushDisable ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_HFlushDisable = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_HFlushDisable_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_HFlushDisable_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_HFlushDisable);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_ShutterCloseDelay_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_ShutterCloseDelay_set self m_ShutterCloseDelay ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ShutterCloseDelay = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_ShutterCloseDelay_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_ShutterCloseDelay_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_ShutterCloseDelay);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_PixelSizeX_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_PixelSizeX_set self m_PixelSizeX ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_PixelSizeX = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_PixelSizeX_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_PixelSizeX_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_PixelSizeX);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_PixelSizeY_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_PixelSizeY_set self m_PixelSizeY ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_PixelSizeY = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_PixelSizeY_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_PixelSizeY_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_PixelSizeY);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_Color_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_Color_set self m_Color ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_Color = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_Color_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_Color_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_Color);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_ReportedGainSixteenBit_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_ReportedGainSixteenBit_set self m_ReportedGainSixteenBit ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ReportedGainSixteenBit = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_ReportedGainSixteenBit_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_ReportedGainSixteenBit_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_ReportedGainSixteenBit);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_MinSuggestedExpTime_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_MinSuggestedExpTime_set self m_MinSuggestedExpTime ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_MinSuggestedExpTime = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_MinSuggestedExpTime_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_MinSuggestedExpTime_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_MinSuggestedExpTime);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_TempRampRateOne_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_TempRampRateOne_set self m_TempRampRateOne ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_TempRampRateOne = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_TempRampRateOne_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_TempRampRateOne_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_TempRampRateOne);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_TempRampRateTwo_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_TempRampRateTwo_set self m_TempRampRateTwo ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_TempRampRateTwo = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_TempRampRateTwo_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_TempRampRateTwo_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_TempRampRateTwo);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_DefaultGainTwelveBit_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_DefaultGainTwelveBit_set self m_DefaultGainTwelveBit ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_DefaultGainTwelveBit = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_DefaultGainTwelveBit_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_DefaultGainTwelveBit_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_DefaultGainTwelveBit);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_DefaultOffsetTwelveBit_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_DefaultOffsetTwelveBit_set self m_DefaultOffsetTwelveBit ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_DefaultOffsetTwelveBit = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_DefaultOffsetTwelveBit_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_DefaultOffsetTwelveBit_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_DefaultOffsetTwelveBit);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_DefaultRVoltage_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_DefaultRVoltage_set self m_DefaultRVoltage ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_DefaultRVoltage = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CApnCamera_m_DefaultRVoltage_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CApnCamera *arg1 = (CApnCamera *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CApnCamera_m_DefaultRVoltage_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_DefaultRVoltage);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_CApnCamera(void *obj) {
CApnCamera *arg1 = (CApnCamera *) obj;
delete arg1;
}
static swig_method swig_CApnCamera_methods[] = {
    {"InitDriver", _wrap_CApnCamera_InitDriver}, 
    {"CloseDriver", _wrap_CApnCamera_CloseDriver}, 
    {"PreStartExpose", _wrap_CApnCamera_PreStartExpose}, 
    {"PostStopExposure", _wrap_CApnCamera_PostStopExposure}, 
    {"sensorInfo", _wrap_CApnCamera_sensorInfo}, 
    {"GetImageData", _wrap_CApnCamera_GetImageData}, 
    {"GetLineData", _wrap_CApnCamera_GetLineData}, 
    {"Read", _wrap_CApnCamera_Read}, 
    {"Write", _wrap_CApnCamera_Write}, 
    {"WriteMultiSRMD", _wrap_CApnCamera_WriteMultiSRMD}, 
    {"WriteMultiMRMD", _wrap_CApnCamera_WriteMultiMRMD}, 
    {"QueryStatusRegs", _wrap_CApnCamera_QueryStatusRegs}, 
    {"InitDefaults", _wrap_CApnCamera_InitDefaults}, 
    {"Expose", _wrap_CApnCamera_Expose}, 
    {"BufferImage", _wrap_CApnCamera_BufferImage}, 
    {"BufferDriftScan", _wrap_CApnCamera_BufferDriftScan}, 
    {"StopExposure", _wrap_CApnCamera_StopExposure}, 
    {"ResetSystem", _wrap_CApnCamera_ResetSystem}, 
    {"PauseTimer", _wrap_CApnCamera_PauseTimer}, 
    {"SetNetworkTransferMode", _wrap_CApnCamera_SetNetworkTransferMode}, 
    {"GetExposurePixelsH", _wrap_CApnCamera_GetExposurePixelsH}, 
    {"GetExposurePixelsV", _wrap_CApnCamera_GetExposurePixelsV}, 
    {"read_Present", _wrap_CApnCamera_read_Present}, 
    {"read_FirmwareVersion", _wrap_CApnCamera_read_FirmwareVersion}, 
    {"read_ShutterState", _wrap_CApnCamera_read_ShutterState}, 
    {"read_DisableShutter", _wrap_CApnCamera_read_DisableShutter}, 
    {"write_DisableShutter", _wrap_CApnCamera_write_DisableShutter}, 
    {"read_ForceShutterOpen", _wrap_CApnCamera_read_ForceShutterOpen}, 
    {"write_ForceShutterOpen", _wrap_CApnCamera_write_ForceShutterOpen}, 
    {"read_ShutterAmpControl", _wrap_CApnCamera_read_ShutterAmpControl}, 
    {"write_ShutterAmpControl", _wrap_CApnCamera_write_ShutterAmpControl}, 
    {"read_ExternalIoReadout", _wrap_CApnCamera_read_ExternalIoReadout}, 
    {"write_ExternalIoReadout", _wrap_CApnCamera_write_ExternalIoReadout}, 
    {"read_FastSequence", _wrap_CApnCamera_read_FastSequence}, 
    {"write_FastSequence", _wrap_CApnCamera_write_FastSequence}, 
    {"read_CameraMode", _wrap_CApnCamera_read_CameraMode}, 
    {"write_CameraMode", _wrap_CApnCamera_write_CameraMode}, 
    {"write_DataBits", _wrap_CApnCamera_write_DataBits}, 
    {"read_ImagingStatus", _wrap_CApnCamera_read_ImagingStatus}, 
    {"read_LedMode", _wrap_CApnCamera_read_LedMode}, 
    {"write_LedMode", _wrap_CApnCamera_write_LedMode}, 
    {"read_LedState", _wrap_CApnCamera_read_LedState}, 
    {"write_LedState", _wrap_CApnCamera_write_LedState}, 
    {"read_CoolerEnable", _wrap_CApnCamera_read_CoolerEnable}, 
    {"write_CoolerEnable", _wrap_CApnCamera_write_CoolerEnable}, 
    {"read_CoolerStatus", _wrap_CApnCamera_read_CoolerStatus}, 
    {"read_CoolerSetPoint", _wrap_CApnCamera_read_CoolerSetPoint}, 
    {"write_CoolerSetPoint", _wrap_CApnCamera_write_CoolerSetPoint}, 
    {"read_CoolerBackoffPoint", _wrap_CApnCamera_read_CoolerBackoffPoint}, 
    {"write_CoolerBackoffPoint", _wrap_CApnCamera_write_CoolerBackoffPoint}, 
    {"read_CoolerDrive", _wrap_CApnCamera_read_CoolerDrive}, 
    {"read_TempCCD", _wrap_CApnCamera_read_TempCCD}, 
    {"read_TempHeatsink", _wrap_CApnCamera_read_TempHeatsink}, 
    {"read_FanMode", _wrap_CApnCamera_read_FanMode}, 
    {"write_FanMode", _wrap_CApnCamera_write_FanMode}, 
    {"write_RoiBinningH", _wrap_CApnCamera_write_RoiBinningH}, 
    {"write_RoiBinningV", _wrap_CApnCamera_write_RoiBinningV}, 
    {"write_RoiPixelsV", _wrap_CApnCamera_write_RoiPixelsV}, 
    {"write_RoiStartY", _wrap_CApnCamera_write_RoiStartY}, 
    {"read_OverscanColumns", _wrap_CApnCamera_read_OverscanColumns}, 
    {"read_ShutterStrobePosition", _wrap_CApnCamera_read_ShutterStrobePosition}, 
    {"write_ShutterStrobePosition", _wrap_CApnCamera_write_ShutterStrobePosition}, 
    {"read_ShutterStrobePeriod", _wrap_CApnCamera_read_ShutterStrobePeriod}, 
    {"write_ShutterStrobePeriod", _wrap_CApnCamera_write_ShutterStrobePeriod}, 
    {"read_SequenceDelay", _wrap_CApnCamera_read_SequenceDelay}, 
    {"write_SequenceDelay", _wrap_CApnCamera_write_SequenceDelay}, 
    {"read_VariableSequenceDelay", _wrap_CApnCamera_read_VariableSequenceDelay}, 
    {"write_VariableSequenceDelay", _wrap_CApnCamera_write_VariableSequenceDelay}, 
    {"read_ImageCount", _wrap_CApnCamera_read_ImageCount}, 
    {"write_ImageCount", _wrap_CApnCamera_write_ImageCount}, 
    {"read_SequenceCounter", _wrap_CApnCamera_read_SequenceCounter}, 
    {"read_TDICounter", _wrap_CApnCamera_read_TDICounter}, 
    {"read_TDIRows", _wrap_CApnCamera_read_TDIRows}, 
    {"write_TDIRows", _wrap_CApnCamera_write_TDIRows}, 
    {"read_TDIRate", _wrap_CApnCamera_read_TDIRate}, 
    {"write_TDIRate", _wrap_CApnCamera_write_TDIRate}, 
    {"read_IoPortAssignment", _wrap_CApnCamera_read_IoPortAssignment}, 
    {"write_IoPortAssignment", _wrap_CApnCamera_write_IoPortAssignment}, 
    {"read_IoPortDirection", _wrap_CApnCamera_read_IoPortDirection}, 
    {"write_IoPortDirection", _wrap_CApnCamera_write_IoPortDirection}, 
    {"read_IoPortData", _wrap_CApnCamera_read_IoPortData}, 
    {"write_IoPortData", _wrap_CApnCamera_write_IoPortData}, 
    {"read_TwelveBitGain", _wrap_CApnCamera_read_TwelveBitGain}, 
    {"write_TwelveBitGain", _wrap_CApnCamera_write_TwelveBitGain}, 
    {"read_InputVoltage", _wrap_CApnCamera_read_InputVoltage}, 
    {"read_AvailableMemory", _wrap_CApnCamera_read_AvailableMemory}, 
    {"read_MaxExposureTime", _wrap_CApnCamera_read_MaxExposureTime}, 
    {"read_NetworkTransferMode", _wrap_CApnCamera_read_NetworkTransferMode}, 
    {"write_NetworkTransferMode", _wrap_CApnCamera_write_NetworkTransferMode}, 
    {"read_TestLedBrightness", _wrap_CApnCamera_read_TestLedBrightness}, 
    {"write_TestLedBrightness", _wrap_CApnCamera_write_TestLedBrightness}, 
    {"ImageReady", _wrap_CApnCamera_ImageReady}, 
    {"SignalImagingDone", _wrap_CApnCamera_SignalImagingDone}, 
    {"LoadVerticalPattern", _wrap_CApnCamera_LoadVerticalPattern}, 
    {"LoadClampPattern", _wrap_CApnCamera_LoadClampPattern}, 
    {"LoadSkipPattern", _wrap_CApnCamera_LoadSkipPattern}, 
    {"LoadRoiPattern", _wrap_CApnCamera_LoadRoiPattern}, 
    {"WriteHorizontalPattern", _wrap_CApnCamera_WriteHorizontalPattern}, 
    {"InitTwelveBitAD", _wrap_CApnCamera_InitTwelveBitAD}, 
    {"WriteTwelveBitOffset", _wrap_CApnCamera_WriteTwelveBitOffset}, 
    {"UpdateGeneralStatus", _wrap_CApnCamera_UpdateGeneralStatus}, 
    {0,0}
};
static swig_attribute swig_CApnCamera_attributes[] = {
    { "-m_CameraInterface",_wrap_CApnCamera_m_CameraInterface_get, _wrap_CApnCamera_m_CameraInterface_set},
    { "-m_ApnSensorInfo",_wrap_CApnCamera_m_ApnSensorInfo_get, _wrap_CApnCamera_m_ApnSensorInfo_set},
    { "-m_RoiStartX",_wrap_CApnCamera_m_RoiStartX_get, _wrap_CApnCamera_m_RoiStartX_set},
    { "-m_RoiStartY",_wrap_CApnCamera_m_RoiStartY_get, _wrap_CApnCamera_m_RoiStartY_set},
    { "-m_RoiPixelsH",_wrap_CApnCamera_m_RoiPixelsH_get, _wrap_CApnCamera_m_RoiPixelsH_set},
    { "-m_RoiPixelsV",_wrap_CApnCamera_m_RoiPixelsV_get, _wrap_CApnCamera_m_RoiPixelsV_set},
    { "-m_RoiBinningH",_wrap_CApnCamera_m_RoiBinningH_get, _wrap_CApnCamera_m_RoiBinningH_set},
    { "-m_RoiBinningV",_wrap_CApnCamera_m_RoiBinningV_get, _wrap_CApnCamera_m_RoiBinningV_set},
    { "-m_DigitizeOverscan",_wrap_CApnCamera_m_DigitizeOverscan_get, _wrap_CApnCamera_m_DigitizeOverscan_set},
    { "-m_DataBits",_wrap_CApnCamera_m_DataBits_get, _wrap_CApnCamera_m_DataBits_set},
    { "-m_ResetVerticalArrays",_wrap_CApnCamera_m_ResetVerticalArrays_get, _wrap_CApnCamera_m_ResetVerticalArrays_set},
    { "-m_pvtCameraMode",_wrap_CApnCamera_m_pvtCameraMode_get, _wrap_CApnCamera_m_pvtCameraMode_set},
    { "-m_pvtNetworkTransferMode",_wrap_CApnCamera_m_pvtNetworkTransferMode_get, _wrap_CApnCamera_m_pvtNetworkTransferMode_set},
    { "-m_pvtImageCount",_wrap_CApnCamera_m_pvtImageCount_get, _wrap_CApnCamera_m_pvtImageCount_set},
    { "-m_pvtTDIRows",_wrap_CApnCamera_m_pvtTDIRows_get, _wrap_CApnCamera_m_pvtTDIRows_set},
    { "-m_pvtTDIRate",_wrap_CApnCamera_m_pvtTDIRate_get, _wrap_CApnCamera_m_pvtTDIRate_set},
    { "-m_pvtSequenceDelay",_wrap_CApnCamera_m_pvtSequenceDelay_get, _wrap_CApnCamera_m_pvtSequenceDelay_set},
    { "-m_pvtShutterStrobePosition",_wrap_CApnCamera_m_pvtShutterStrobePosition_get, _wrap_CApnCamera_m_pvtShutterStrobePosition_set},
    { "-m_pvtShutterStrobePeriod",_wrap_CApnCamera_m_pvtShutterStrobePeriod_get, _wrap_CApnCamera_m_pvtShutterStrobePeriod_set},
    { "-m_pvtExposurePixelsH",_wrap_CApnCamera_m_pvtExposurePixelsH_get, _wrap_CApnCamera_m_pvtExposurePixelsH_set},
    { "-m_pvtExposurePixelsV",_wrap_CApnCamera_m_pvtExposurePixelsV_get, _wrap_CApnCamera_m_pvtExposurePixelsV_set},
    { "-m_pvtTwelveBitGain",_wrap_CApnCamera_m_pvtTwelveBitGain_get, _wrap_CApnCamera_m_pvtTwelveBitGain_set},
    { "-m_pvtLedMode",_wrap_CApnCamera_m_pvtLedMode_get, _wrap_CApnCamera_m_pvtLedMode_set},
    { "-m_pvtLedStateA",_wrap_CApnCamera_m_pvtLedStateA_get, _wrap_CApnCamera_m_pvtLedStateA_set},
    { "-m_pvtLedStateB",_wrap_CApnCamera_m_pvtLedStateB_get, _wrap_CApnCamera_m_pvtLedStateB_set},
    { "-m_pvtCoolerEnable",_wrap_CApnCamera_m_pvtCoolerEnable_get, _wrap_CApnCamera_m_pvtCoolerEnable_set},
    { "-m_pvtFanMode",_wrap_CApnCamera_m_pvtFanMode_get, _wrap_CApnCamera_m_pvtFanMode_set},
    { "-m_pvtCoolerBackoffPoint",_wrap_CApnCamera_m_pvtCoolerBackoffPoint_get, _wrap_CApnCamera_m_pvtCoolerBackoffPoint_set},
    { "-m_pvtCoolerStatus",_wrap_CApnCamera_m_pvtCoolerStatus_get, _wrap_CApnCamera_m_pvtCoolerStatus_set},
    { "-m_pvtImagingStatus",_wrap_CApnCamera_m_pvtImagingStatus_get, _wrap_CApnCamera_m_pvtImagingStatus_set},
    { "-m_pvtShutterState",_wrap_CApnCamera_m_pvtShutterState_get, _wrap_CApnCamera_m_pvtShutterState_set},
    { "-m_pvtImageInProgress",_wrap_CApnCamera_m_pvtImageInProgress_get, _wrap_CApnCamera_m_pvtImageInProgress_set},
    { "-m_pvtImageReady",_wrap_CApnCamera_m_pvtImageReady_get, _wrap_CApnCamera_m_pvtImageReady_set},
    { "-m_pvtStatusReg",_wrap_CApnCamera_m_pvtStatusReg_get, _wrap_CApnCamera_m_pvtStatusReg_set},
    { "-m_pvtCoolerDrive",_wrap_CApnCamera_m_pvtCoolerDrive_get, _wrap_CApnCamera_m_pvtCoolerDrive_set},
    { "-m_pvtCurrentHeatsinkTemp",_wrap_CApnCamera_m_pvtCurrentHeatsinkTemp_get, _wrap_CApnCamera_m_pvtCurrentHeatsinkTemp_set},
    { "-m_pvtCurrentCcdTemp",_wrap_CApnCamera_m_pvtCurrentCcdTemp_get, _wrap_CApnCamera_m_pvtCurrentCcdTemp_set},
    { "-m_pvtInputVoltage",_wrap_CApnCamera_m_pvtInputVoltage_get, _wrap_CApnCamera_m_pvtInputVoltage_set},
    { "-m_pvtIoPortAssignment",_wrap_CApnCamera_m_pvtIoPortAssignment_get, _wrap_CApnCamera_m_pvtIoPortAssignment_set},
    { "-m_pvtIoPortDirection",_wrap_CApnCamera_m_pvtIoPortDirection_get, _wrap_CApnCamera_m_pvtIoPortDirection_set},
    { "-m_Sensor",_wrap_CApnCamera_m_Sensor_get, _wrap_CApnCamera_m_Sensor_set},
    { "-m_CameraModel",_wrap_CApnCamera_m_CameraModel_get, _wrap_CApnCamera_m_CameraModel_set},
    { "-m_CameraId",_wrap_CApnCamera_m_CameraId_get, _wrap_CApnCamera_m_CameraId_set},
    { "-m_InterlineCCD",_wrap_CApnCamera_m_InterlineCCD_get, _wrap_CApnCamera_m_InterlineCCD_set},
    { "-m_SupportsSerialA",_wrap_CApnCamera_m_SupportsSerialA_get, _wrap_CApnCamera_m_SupportsSerialA_set},
    { "-m_SupportsSerialB",_wrap_CApnCamera_m_SupportsSerialB_get, _wrap_CApnCamera_m_SupportsSerialB_set},
    { "-m_SensorTypeCCD",_wrap_CApnCamera_m_SensorTypeCCD_get, _wrap_CApnCamera_m_SensorTypeCCD_set},
    { "-m_TotalColumns",_wrap_CApnCamera_m_TotalColumns_get, _wrap_CApnCamera_m_TotalColumns_set},
    { "-m_ImagingColumns",_wrap_CApnCamera_m_ImagingColumns_get, _wrap_CApnCamera_m_ImagingColumns_set},
    { "-m_ClampColumns",_wrap_CApnCamera_m_ClampColumns_get, _wrap_CApnCamera_m_ClampColumns_set},
    { "-m_PreRoiSkipColumns",_wrap_CApnCamera_m_PreRoiSkipColumns_get, _wrap_CApnCamera_m_PreRoiSkipColumns_set},
    { "-m_PostRoiSkipColumns",_wrap_CApnCamera_m_PostRoiSkipColumns_get, _wrap_CApnCamera_m_PostRoiSkipColumns_set},
    { "-m_OverscanColumns",_wrap_CApnCamera_m_OverscanColumns_get, _wrap_CApnCamera_m_OverscanColumns_set},
    { "-m_TotalRows",_wrap_CApnCamera_m_TotalRows_get, _wrap_CApnCamera_m_TotalRows_set},
    { "-m_ImagingRows",_wrap_CApnCamera_m_ImagingRows_get, _wrap_CApnCamera_m_ImagingRows_set},
    { "-m_UnderscanRows",_wrap_CApnCamera_m_UnderscanRows_get, _wrap_CApnCamera_m_UnderscanRows_set},
    { "-m_OverscanRows",_wrap_CApnCamera_m_OverscanRows_get, _wrap_CApnCamera_m_OverscanRows_set},
    { "-m_VFlushBinning",_wrap_CApnCamera_m_VFlushBinning_get, _wrap_CApnCamera_m_VFlushBinning_set},
    { "-m_HFlushDisable",_wrap_CApnCamera_m_HFlushDisable_get, _wrap_CApnCamera_m_HFlushDisable_set},
    { "-m_ShutterCloseDelay",_wrap_CApnCamera_m_ShutterCloseDelay_get, _wrap_CApnCamera_m_ShutterCloseDelay_set},
    { "-m_PixelSizeX",_wrap_CApnCamera_m_PixelSizeX_get, _wrap_CApnCamera_m_PixelSizeX_set},
    { "-m_PixelSizeY",_wrap_CApnCamera_m_PixelSizeY_get, _wrap_CApnCamera_m_PixelSizeY_set},
    { "-m_Color",_wrap_CApnCamera_m_Color_get, _wrap_CApnCamera_m_Color_set},
    { "-m_ReportedGainSixteenBit",_wrap_CApnCamera_m_ReportedGainSixteenBit_get, _wrap_CApnCamera_m_ReportedGainSixteenBit_set},
    { "-m_MinSuggestedExpTime",_wrap_CApnCamera_m_MinSuggestedExpTime_get, _wrap_CApnCamera_m_MinSuggestedExpTime_set},
    { "-m_TempRampRateOne",_wrap_CApnCamera_m_TempRampRateOne_get, _wrap_CApnCamera_m_TempRampRateOne_set},
    { "-m_TempRampRateTwo",_wrap_CApnCamera_m_TempRampRateTwo_get, _wrap_CApnCamera_m_TempRampRateTwo_set},
    { "-m_DefaultGainTwelveBit",_wrap_CApnCamera_m_DefaultGainTwelveBit_get, _wrap_CApnCamera_m_DefaultGainTwelveBit_set},
    { "-m_DefaultOffsetTwelveBit",_wrap_CApnCamera_m_DefaultOffsetTwelveBit_get, _wrap_CApnCamera_m_DefaultOffsetTwelveBit_set},
    { "-m_DefaultRVoltage",_wrap_CApnCamera_m_DefaultRVoltage_get, _wrap_CApnCamera_m_DefaultRVoltage_set},
    {0,0,0}
};
static swig_class *swig_CApnCamera_bases[] = {0};
swig_class _wrap_class_CApnCamera = { "CApnCamera", &SWIGTYPE_p_CApnCamera,_wrap_new_CApnCamera, swig_delete_CApnCamera, swig_CApnCamera_methods, swig_CApnCamera_attributes, swig_CApnCamera_bases };

static swig_command_info swig_commands[] = {
    { SWIG_prefix "new_CApnCamera", (swig_wrapper_func) _wrap_new_CApnCamera, NULL},
    { SWIG_prefix "delete_CApnCamera", (swig_wrapper_func) _wrap_delete_CApnCamera, NULL},
    { SWIG_prefix "CApnCamera_InitDriver", (swig_wrapper_func) _wrap_CApnCamera_InitDriver, NULL},
    { SWIG_prefix "CApnCamera_CloseDriver", (swig_wrapper_func) _wrap_CApnCamera_CloseDriver, NULL},
    { SWIG_prefix "CApnCamera_PreStartExpose", (swig_wrapper_func) _wrap_CApnCamera_PreStartExpose, NULL},
    { SWIG_prefix "CApnCamera_PostStopExposure", (swig_wrapper_func) _wrap_CApnCamera_PostStopExposure, NULL},
    { SWIG_prefix "CApnCamera_sensorInfo", (swig_wrapper_func) _wrap_CApnCamera_sensorInfo, NULL},
    { SWIG_prefix "CApnCamera_GetImageData", (swig_wrapper_func) _wrap_CApnCamera_GetImageData, NULL},
    { SWIG_prefix "CApnCamera_GetLineData", (swig_wrapper_func) _wrap_CApnCamera_GetLineData, NULL},
    { SWIG_prefix "CApnCamera_Read", (swig_wrapper_func) _wrap_CApnCamera_Read, NULL},
    { SWIG_prefix "CApnCamera_Write", (swig_wrapper_func) _wrap_CApnCamera_Write, NULL},
    { SWIG_prefix "CApnCamera_WriteMultiSRMD", (swig_wrapper_func) _wrap_CApnCamera_WriteMultiSRMD, NULL},
    { SWIG_prefix "CApnCamera_WriteMultiMRMD", (swig_wrapper_func) _wrap_CApnCamera_WriteMultiMRMD, NULL},
    { SWIG_prefix "CApnCamera_QueryStatusRegs", (swig_wrapper_func) _wrap_CApnCamera_QueryStatusRegs, NULL},
    { SWIG_prefix "CApnCamera_InitDefaults", (swig_wrapper_func) _wrap_CApnCamera_InitDefaults, NULL},
    { SWIG_prefix "CApnCamera_Expose", (swig_wrapper_func) _wrap_CApnCamera_Expose, NULL},
    { SWIG_prefix "CApnCamera_BufferImage", (swig_wrapper_func) _wrap_CApnCamera_BufferImage, NULL},
    { SWIG_prefix "CApnCamera_BufferDriftScan", (swig_wrapper_func) _wrap_CApnCamera_BufferDriftScan, NULL},
    { SWIG_prefix "CApnCamera_StopExposure", (swig_wrapper_func) _wrap_CApnCamera_StopExposure, NULL},
    { SWIG_prefix "CApnCamera_ResetSystem", (swig_wrapper_func) _wrap_CApnCamera_ResetSystem, NULL},
    { SWIG_prefix "CApnCamera_PauseTimer", (swig_wrapper_func) _wrap_CApnCamera_PauseTimer, NULL},
    { SWIG_prefix "CApnCamera_SetNetworkTransferMode", (swig_wrapper_func) _wrap_CApnCamera_SetNetworkTransferMode, NULL},
    { SWIG_prefix "CApnCamera_GetExposurePixelsH", (swig_wrapper_func) _wrap_CApnCamera_GetExposurePixelsH, NULL},
    { SWIG_prefix "CApnCamera_GetExposurePixelsV", (swig_wrapper_func) _wrap_CApnCamera_GetExposurePixelsV, NULL},
    { SWIG_prefix "CApnCamera_read_Present", (swig_wrapper_func) _wrap_CApnCamera_read_Present, NULL},
    { SWIG_prefix "CApnCamera_read_FirmwareVersion", (swig_wrapper_func) _wrap_CApnCamera_read_FirmwareVersion, NULL},
    { SWIG_prefix "CApnCamera_read_ShutterState", (swig_wrapper_func) _wrap_CApnCamera_read_ShutterState, NULL},
    { SWIG_prefix "CApnCamera_read_DisableShutter", (swig_wrapper_func) _wrap_CApnCamera_read_DisableShutter, NULL},
    { SWIG_prefix "CApnCamera_write_DisableShutter", (swig_wrapper_func) _wrap_CApnCamera_write_DisableShutter, NULL},
    { SWIG_prefix "CApnCamera_read_ForceShutterOpen", (swig_wrapper_func) _wrap_CApnCamera_read_ForceShutterOpen, NULL},
    { SWIG_prefix "CApnCamera_write_ForceShutterOpen", (swig_wrapper_func) _wrap_CApnCamera_write_ForceShutterOpen, NULL},
    { SWIG_prefix "CApnCamera_read_ShutterAmpControl", (swig_wrapper_func) _wrap_CApnCamera_read_ShutterAmpControl, NULL},
    { SWIG_prefix "CApnCamera_write_ShutterAmpControl", (swig_wrapper_func) _wrap_CApnCamera_write_ShutterAmpControl, NULL},
    { SWIG_prefix "CApnCamera_read_ExternalIoReadout", (swig_wrapper_func) _wrap_CApnCamera_read_ExternalIoReadout, NULL},
    { SWIG_prefix "CApnCamera_write_ExternalIoReadout", (swig_wrapper_func) _wrap_CApnCamera_write_ExternalIoReadout, NULL},
    { SWIG_prefix "CApnCamera_read_FastSequence", (swig_wrapper_func) _wrap_CApnCamera_read_FastSequence, NULL},
    { SWIG_prefix "CApnCamera_write_FastSequence", (swig_wrapper_func) _wrap_CApnCamera_write_FastSequence, NULL},
    { SWIG_prefix "CApnCamera_read_CameraMode", (swig_wrapper_func) _wrap_CApnCamera_read_CameraMode, NULL},
    { SWIG_prefix "CApnCamera_write_CameraMode", (swig_wrapper_func) _wrap_CApnCamera_write_CameraMode, NULL},
    { SWIG_prefix "CApnCamera_write_DataBits", (swig_wrapper_func) _wrap_CApnCamera_write_DataBits, NULL},
    { SWIG_prefix "CApnCamera_read_ImagingStatus", (swig_wrapper_func) _wrap_CApnCamera_read_ImagingStatus, NULL},
    { SWIG_prefix "CApnCamera_read_LedMode", (swig_wrapper_func) _wrap_CApnCamera_read_LedMode, NULL},
    { SWIG_prefix "CApnCamera_write_LedMode", (swig_wrapper_func) _wrap_CApnCamera_write_LedMode, NULL},
    { SWIG_prefix "CApnCamera_read_LedState", (swig_wrapper_func) _wrap_CApnCamera_read_LedState, NULL},
    { SWIG_prefix "CApnCamera_write_LedState", (swig_wrapper_func) _wrap_CApnCamera_write_LedState, NULL},
    { SWIG_prefix "CApnCamera_read_CoolerEnable", (swig_wrapper_func) _wrap_CApnCamera_read_CoolerEnable, NULL},
    { SWIG_prefix "CApnCamera_write_CoolerEnable", (swig_wrapper_func) _wrap_CApnCamera_write_CoolerEnable, NULL},
    { SWIG_prefix "CApnCamera_read_CoolerStatus", (swig_wrapper_func) _wrap_CApnCamera_read_CoolerStatus, NULL},
    { SWIG_prefix "CApnCamera_read_CoolerSetPoint", (swig_wrapper_func) _wrap_CApnCamera_read_CoolerSetPoint, NULL},
    { SWIG_prefix "CApnCamera_write_CoolerSetPoint", (swig_wrapper_func) _wrap_CApnCamera_write_CoolerSetPoint, NULL},
    { SWIG_prefix "CApnCamera_read_CoolerBackoffPoint", (swig_wrapper_func) _wrap_CApnCamera_read_CoolerBackoffPoint, NULL},
    { SWIG_prefix "CApnCamera_write_CoolerBackoffPoint", (swig_wrapper_func) _wrap_CApnCamera_write_CoolerBackoffPoint, NULL},
    { SWIG_prefix "CApnCamera_read_CoolerDrive", (swig_wrapper_func) _wrap_CApnCamera_read_CoolerDrive, NULL},
    { SWIG_prefix "CApnCamera_read_TempCCD", (swig_wrapper_func) _wrap_CApnCamera_read_TempCCD, NULL},
    { SWIG_prefix "CApnCamera_read_TempHeatsink", (swig_wrapper_func) _wrap_CApnCamera_read_TempHeatsink, NULL},
    { SWIG_prefix "CApnCamera_read_FanMode", (swig_wrapper_func) _wrap_CApnCamera_read_FanMode, NULL},
    { SWIG_prefix "CApnCamera_write_FanMode", (swig_wrapper_func) _wrap_CApnCamera_write_FanMode, NULL},
    { SWIG_prefix "CApnCamera_write_RoiBinningH", (swig_wrapper_func) _wrap_CApnCamera_write_RoiBinningH, NULL},
    { SWIG_prefix "CApnCamera_write_RoiBinningV", (swig_wrapper_func) _wrap_CApnCamera_write_RoiBinningV, NULL},
    { SWIG_prefix "CApnCamera_write_RoiPixelsV", (swig_wrapper_func) _wrap_CApnCamera_write_RoiPixelsV, NULL},
    { SWIG_prefix "CApnCamera_write_RoiStartY", (swig_wrapper_func) _wrap_CApnCamera_write_RoiStartY, NULL},
    { SWIG_prefix "CApnCamera_read_OverscanColumns", (swig_wrapper_func) _wrap_CApnCamera_read_OverscanColumns, NULL},
    { SWIG_prefix "CApnCamera_read_ShutterStrobePosition", (swig_wrapper_func) _wrap_CApnCamera_read_ShutterStrobePosition, NULL},
    { SWIG_prefix "CApnCamera_write_ShutterStrobePosition", (swig_wrapper_func) _wrap_CApnCamera_write_ShutterStrobePosition, NULL},
    { SWIG_prefix "CApnCamera_read_ShutterStrobePeriod", (swig_wrapper_func) _wrap_CApnCamera_read_ShutterStrobePeriod, NULL},
    { SWIG_prefix "CApnCamera_write_ShutterStrobePeriod", (swig_wrapper_func) _wrap_CApnCamera_write_ShutterStrobePeriod, NULL},
    { SWIG_prefix "CApnCamera_read_SequenceDelay", (swig_wrapper_func) _wrap_CApnCamera_read_SequenceDelay, NULL},
    { SWIG_prefix "CApnCamera_write_SequenceDelay", (swig_wrapper_func) _wrap_CApnCamera_write_SequenceDelay, NULL},
    { SWIG_prefix "CApnCamera_read_VariableSequenceDelay", (swig_wrapper_func) _wrap_CApnCamera_read_VariableSequenceDelay, NULL},
    { SWIG_prefix "CApnCamera_write_VariableSequenceDelay", (swig_wrapper_func) _wrap_CApnCamera_write_VariableSequenceDelay, NULL},
    { SWIG_prefix "CApnCamera_read_ImageCount", (swig_wrapper_func) _wrap_CApnCamera_read_ImageCount, NULL},
    { SWIG_prefix "CApnCamera_write_ImageCount", (swig_wrapper_func) _wrap_CApnCamera_write_ImageCount, NULL},
    { SWIG_prefix "CApnCamera_read_SequenceCounter", (swig_wrapper_func) _wrap_CApnCamera_read_SequenceCounter, NULL},
    { SWIG_prefix "CApnCamera_read_TDICounter", (swig_wrapper_func) _wrap_CApnCamera_read_TDICounter, NULL},
    { SWIG_prefix "CApnCamera_read_TDIRows", (swig_wrapper_func) _wrap_CApnCamera_read_TDIRows, NULL},
    { SWIG_prefix "CApnCamera_write_TDIRows", (swig_wrapper_func) _wrap_CApnCamera_write_TDIRows, NULL},
    { SWIG_prefix "CApnCamera_read_TDIRate", (swig_wrapper_func) _wrap_CApnCamera_read_TDIRate, NULL},
    { SWIG_prefix "CApnCamera_write_TDIRate", (swig_wrapper_func) _wrap_CApnCamera_write_TDIRate, NULL},
    { SWIG_prefix "CApnCamera_read_IoPortAssignment", (swig_wrapper_func) _wrap_CApnCamera_read_IoPortAssignment, NULL},
    { SWIG_prefix "CApnCamera_write_IoPortAssignment", (swig_wrapper_func) _wrap_CApnCamera_write_IoPortAssignment, NULL},
    { SWIG_prefix "CApnCamera_read_IoPortDirection", (swig_wrapper_func) _wrap_CApnCamera_read_IoPortDirection, NULL},
    { SWIG_prefix "CApnCamera_write_IoPortDirection", (swig_wrapper_func) _wrap_CApnCamera_write_IoPortDirection, NULL},
    { SWIG_prefix "CApnCamera_read_IoPortData", (swig_wrapper_func) _wrap_CApnCamera_read_IoPortData, NULL},
    { SWIG_prefix "CApnCamera_write_IoPortData", (swig_wrapper_func) _wrap_CApnCamera_write_IoPortData, NULL},
    { SWIG_prefix "CApnCamera_read_TwelveBitGain", (swig_wrapper_func) _wrap_CApnCamera_read_TwelveBitGain, NULL},
    { SWIG_prefix "CApnCamera_write_TwelveBitGain", (swig_wrapper_func) _wrap_CApnCamera_write_TwelveBitGain, NULL},
    { SWIG_prefix "CApnCamera_read_InputVoltage", (swig_wrapper_func) _wrap_CApnCamera_read_InputVoltage, NULL},
    { SWIG_prefix "CApnCamera_read_AvailableMemory", (swig_wrapper_func) _wrap_CApnCamera_read_AvailableMemory, NULL},
    { SWIG_prefix "CApnCamera_read_MaxExposureTime", (swig_wrapper_func) _wrap_CApnCamera_read_MaxExposureTime, NULL},
    { SWIG_prefix "CApnCamera_read_NetworkTransferMode", (swig_wrapper_func) _wrap_CApnCamera_read_NetworkTransferMode, NULL},
    { SWIG_prefix "CApnCamera_write_NetworkTransferMode", (swig_wrapper_func) _wrap_CApnCamera_write_NetworkTransferMode, NULL},
    { SWIG_prefix "CApnCamera_read_TestLedBrightness", (swig_wrapper_func) _wrap_CApnCamera_read_TestLedBrightness, NULL},
    { SWIG_prefix "CApnCamera_write_TestLedBrightness", (swig_wrapper_func) _wrap_CApnCamera_write_TestLedBrightness, NULL},
    { SWIG_prefix "CApnCamera_ImageReady", (swig_wrapper_func) _wrap_CApnCamera_ImageReady, NULL},
    { SWIG_prefix "CApnCamera_SignalImagingDone", (swig_wrapper_func) _wrap_CApnCamera_SignalImagingDone, NULL},
    { SWIG_prefix "CApnCamera_m_CameraInterface_set", (swig_wrapper_func) _wrap_CApnCamera_m_CameraInterface_set, NULL},
    { SWIG_prefix "CApnCamera_m_CameraInterface_get", (swig_wrapper_func) _wrap_CApnCamera_m_CameraInterface_get, NULL},
    { SWIG_prefix "CApnCamera_m_ApnSensorInfo_set", (swig_wrapper_func) _wrap_CApnCamera_m_ApnSensorInfo_set, NULL},
    { SWIG_prefix "CApnCamera_m_ApnSensorInfo_get", (swig_wrapper_func) _wrap_CApnCamera_m_ApnSensorInfo_get, NULL},
    { SWIG_prefix "CApnCamera_m_RoiStartX_set", (swig_wrapper_func) _wrap_CApnCamera_m_RoiStartX_set, NULL},
    { SWIG_prefix "CApnCamera_m_RoiStartX_get", (swig_wrapper_func) _wrap_CApnCamera_m_RoiStartX_get, NULL},
    { SWIG_prefix "CApnCamera_m_RoiStartY_set", (swig_wrapper_func) _wrap_CApnCamera_m_RoiStartY_set, NULL},
    { SWIG_prefix "CApnCamera_m_RoiStartY_get", (swig_wrapper_func) _wrap_CApnCamera_m_RoiStartY_get, NULL},
    { SWIG_prefix "CApnCamera_m_RoiPixelsH_set", (swig_wrapper_func) _wrap_CApnCamera_m_RoiPixelsH_set, NULL},
    { SWIG_prefix "CApnCamera_m_RoiPixelsH_get", (swig_wrapper_func) _wrap_CApnCamera_m_RoiPixelsH_get, NULL},
    { SWIG_prefix "CApnCamera_m_RoiPixelsV_set", (swig_wrapper_func) _wrap_CApnCamera_m_RoiPixelsV_set, NULL},
    { SWIG_prefix "CApnCamera_m_RoiPixelsV_get", (swig_wrapper_func) _wrap_CApnCamera_m_RoiPixelsV_get, NULL},
    { SWIG_prefix "CApnCamera_m_RoiBinningH_set", (swig_wrapper_func) _wrap_CApnCamera_m_RoiBinningH_set, NULL},
    { SWIG_prefix "CApnCamera_m_RoiBinningH_get", (swig_wrapper_func) _wrap_CApnCamera_m_RoiBinningH_get, NULL},
    { SWIG_prefix "CApnCamera_m_RoiBinningV_set", (swig_wrapper_func) _wrap_CApnCamera_m_RoiBinningV_set, NULL},
    { SWIG_prefix "CApnCamera_m_RoiBinningV_get", (swig_wrapper_func) _wrap_CApnCamera_m_RoiBinningV_get, NULL},
    { SWIG_prefix "CApnCamera_m_DigitizeOverscan_set", (swig_wrapper_func) _wrap_CApnCamera_m_DigitizeOverscan_set, NULL},
    { SWIG_prefix "CApnCamera_m_DigitizeOverscan_get", (swig_wrapper_func) _wrap_CApnCamera_m_DigitizeOverscan_get, NULL},
    { SWIG_prefix "CApnCamera_m_DataBits_set", (swig_wrapper_func) _wrap_CApnCamera_m_DataBits_set, NULL},
    { SWIG_prefix "CApnCamera_m_DataBits_get", (swig_wrapper_func) _wrap_CApnCamera_m_DataBits_get, NULL},
    { SWIG_prefix "CApnCamera_LoadVerticalPattern", (swig_wrapper_func) _wrap_CApnCamera_LoadVerticalPattern, NULL},
    { SWIG_prefix "CApnCamera_LoadClampPattern", (swig_wrapper_func) _wrap_CApnCamera_LoadClampPattern, NULL},
    { SWIG_prefix "CApnCamera_LoadSkipPattern", (swig_wrapper_func) _wrap_CApnCamera_LoadSkipPattern, NULL},
    { SWIG_prefix "CApnCamera_LoadRoiPattern", (swig_wrapper_func) _wrap_CApnCamera_LoadRoiPattern, NULL},
    { SWIG_prefix "CApnCamera_WriteHorizontalPattern", (swig_wrapper_func) _wrap_CApnCamera_WriteHorizontalPattern, NULL},
    { SWIG_prefix "CApnCamera_InitTwelveBitAD", (swig_wrapper_func) _wrap_CApnCamera_InitTwelveBitAD, NULL},
    { SWIG_prefix "CApnCamera_WriteTwelveBitOffset", (swig_wrapper_func) _wrap_CApnCamera_WriteTwelveBitOffset, NULL},
    { SWIG_prefix "CApnCamera_UpdateGeneralStatus", (swig_wrapper_func) _wrap_CApnCamera_UpdateGeneralStatus, NULL},
    { SWIG_prefix "CApnCamera_m_ResetVerticalArrays_set", (swig_wrapper_func) _wrap_CApnCamera_m_ResetVerticalArrays_set, NULL},
    { SWIG_prefix "CApnCamera_m_ResetVerticalArrays_get", (swig_wrapper_func) _wrap_CApnCamera_m_ResetVerticalArrays_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtCameraMode_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtCameraMode_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtCameraMode_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtCameraMode_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtNetworkTransferMode_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtNetworkTransferMode_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtNetworkTransferMode_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtNetworkTransferMode_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtImageCount_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtImageCount_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtImageCount_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtImageCount_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtTDIRows_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtTDIRows_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtTDIRows_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtTDIRows_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtTDIRate_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtTDIRate_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtTDIRate_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtTDIRate_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtSequenceDelay_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtSequenceDelay_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtSequenceDelay_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtSequenceDelay_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtShutterStrobePosition_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtShutterStrobePosition_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtShutterStrobePosition_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtShutterStrobePosition_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtShutterStrobePeriod_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtShutterStrobePeriod_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtShutterStrobePeriod_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtShutterStrobePeriod_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtExposurePixelsH_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtExposurePixelsH_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtExposurePixelsH_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtExposurePixelsH_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtExposurePixelsV_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtExposurePixelsV_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtExposurePixelsV_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtExposurePixelsV_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtTwelveBitGain_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtTwelveBitGain_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtTwelveBitGain_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtTwelveBitGain_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtLedMode_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtLedMode_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtLedMode_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtLedMode_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtLedStateA_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtLedStateA_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtLedStateA_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtLedStateA_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtLedStateB_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtLedStateB_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtLedStateB_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtLedStateB_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtCoolerEnable_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtCoolerEnable_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtCoolerEnable_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtCoolerEnable_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtFanMode_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtFanMode_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtFanMode_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtFanMode_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtCoolerBackoffPoint_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtCoolerBackoffPoint_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtCoolerBackoffPoint_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtCoolerBackoffPoint_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtCoolerStatus_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtCoolerStatus_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtCoolerStatus_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtCoolerStatus_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtImagingStatus_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtImagingStatus_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtImagingStatus_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtImagingStatus_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtShutterState_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtShutterState_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtShutterState_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtShutterState_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtImageInProgress_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtImageInProgress_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtImageInProgress_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtImageInProgress_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtImageReady_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtImageReady_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtImageReady_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtImageReady_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtStatusReg_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtStatusReg_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtStatusReg_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtStatusReg_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtCoolerDrive_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtCoolerDrive_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtCoolerDrive_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtCoolerDrive_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtCurrentHeatsinkTemp_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtCurrentHeatsinkTemp_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtCurrentHeatsinkTemp_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtCurrentHeatsinkTemp_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtCurrentCcdTemp_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtCurrentCcdTemp_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtCurrentCcdTemp_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtCurrentCcdTemp_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtInputVoltage_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtInputVoltage_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtInputVoltage_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtInputVoltage_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtIoPortAssignment_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtIoPortAssignment_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtIoPortAssignment_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtIoPortAssignment_get, NULL},
    { SWIG_prefix "CApnCamera_m_pvtIoPortDirection_set", (swig_wrapper_func) _wrap_CApnCamera_m_pvtIoPortDirection_set, NULL},
    { SWIG_prefix "CApnCamera_m_pvtIoPortDirection_get", (swig_wrapper_func) _wrap_CApnCamera_m_pvtIoPortDirection_get, NULL},
    { SWIG_prefix "CApnCamera_m_Sensor_set", (swig_wrapper_func) _wrap_CApnCamera_m_Sensor_set, NULL},
    { SWIG_prefix "CApnCamera_m_Sensor_get", (swig_wrapper_func) _wrap_CApnCamera_m_Sensor_get, NULL},
    { SWIG_prefix "CApnCamera_m_CameraModel_set", (swig_wrapper_func) _wrap_CApnCamera_m_CameraModel_set, NULL},
    { SWIG_prefix "CApnCamera_m_CameraModel_get", (swig_wrapper_func) _wrap_CApnCamera_m_CameraModel_get, NULL},
    { SWIG_prefix "CApnCamera_m_CameraId_set", (swig_wrapper_func) _wrap_CApnCamera_m_CameraId_set, NULL},
    { SWIG_prefix "CApnCamera_m_CameraId_get", (swig_wrapper_func) _wrap_CApnCamera_m_CameraId_get, NULL},
    { SWIG_prefix "CApnCamera_m_InterlineCCD_set", (swig_wrapper_func) _wrap_CApnCamera_m_InterlineCCD_set, NULL},
    { SWIG_prefix "CApnCamera_m_InterlineCCD_get", (swig_wrapper_func) _wrap_CApnCamera_m_InterlineCCD_get, NULL},
    { SWIG_prefix "CApnCamera_m_SupportsSerialA_set", (swig_wrapper_func) _wrap_CApnCamera_m_SupportsSerialA_set, NULL},
    { SWIG_prefix "CApnCamera_m_SupportsSerialA_get", (swig_wrapper_func) _wrap_CApnCamera_m_SupportsSerialA_get, NULL},
    { SWIG_prefix "CApnCamera_m_SupportsSerialB_set", (swig_wrapper_func) _wrap_CApnCamera_m_SupportsSerialB_set, NULL},
    { SWIG_prefix "CApnCamera_m_SupportsSerialB_get", (swig_wrapper_func) _wrap_CApnCamera_m_SupportsSerialB_get, NULL},
    { SWIG_prefix "CApnCamera_m_SensorTypeCCD_set", (swig_wrapper_func) _wrap_CApnCamera_m_SensorTypeCCD_set, NULL},
    { SWIG_prefix "CApnCamera_m_SensorTypeCCD_get", (swig_wrapper_func) _wrap_CApnCamera_m_SensorTypeCCD_get, NULL},
    { SWIG_prefix "CApnCamera_m_TotalColumns_set", (swig_wrapper_func) _wrap_CApnCamera_m_TotalColumns_set, NULL},
    { SWIG_prefix "CApnCamera_m_TotalColumns_get", (swig_wrapper_func) _wrap_CApnCamera_m_TotalColumns_get, NULL},
    { SWIG_prefix "CApnCamera_m_ImagingColumns_set", (swig_wrapper_func) _wrap_CApnCamera_m_ImagingColumns_set, NULL},
    { SWIG_prefix "CApnCamera_m_ImagingColumns_get", (swig_wrapper_func) _wrap_CApnCamera_m_ImagingColumns_get, NULL},
    { SWIG_prefix "CApnCamera_m_ClampColumns_set", (swig_wrapper_func) _wrap_CApnCamera_m_ClampColumns_set, NULL},
    { SWIG_prefix "CApnCamera_m_ClampColumns_get", (swig_wrapper_func) _wrap_CApnCamera_m_ClampColumns_get, NULL},
    { SWIG_prefix "CApnCamera_m_PreRoiSkipColumns_set", (swig_wrapper_func) _wrap_CApnCamera_m_PreRoiSkipColumns_set, NULL},
    { SWIG_prefix "CApnCamera_m_PreRoiSkipColumns_get", (swig_wrapper_func) _wrap_CApnCamera_m_PreRoiSkipColumns_get, NULL},
    { SWIG_prefix "CApnCamera_m_PostRoiSkipColumns_set", (swig_wrapper_func) _wrap_CApnCamera_m_PostRoiSkipColumns_set, NULL},
    { SWIG_prefix "CApnCamera_m_PostRoiSkipColumns_get", (swig_wrapper_func) _wrap_CApnCamera_m_PostRoiSkipColumns_get, NULL},
    { SWIG_prefix "CApnCamera_m_OverscanColumns_set", (swig_wrapper_func) _wrap_CApnCamera_m_OverscanColumns_set, NULL},
    { SWIG_prefix "CApnCamera_m_OverscanColumns_get", (swig_wrapper_func) _wrap_CApnCamera_m_OverscanColumns_get, NULL},
    { SWIG_prefix "CApnCamera_m_TotalRows_set", (swig_wrapper_func) _wrap_CApnCamera_m_TotalRows_set, NULL},
    { SWIG_prefix "CApnCamera_m_TotalRows_get", (swig_wrapper_func) _wrap_CApnCamera_m_TotalRows_get, NULL},
    { SWIG_prefix "CApnCamera_m_ImagingRows_set", (swig_wrapper_func) _wrap_CApnCamera_m_ImagingRows_set, NULL},
    { SWIG_prefix "CApnCamera_m_ImagingRows_get", (swig_wrapper_func) _wrap_CApnCamera_m_ImagingRows_get, NULL},
    { SWIG_prefix "CApnCamera_m_UnderscanRows_set", (swig_wrapper_func) _wrap_CApnCamera_m_UnderscanRows_set, NULL},
    { SWIG_prefix "CApnCamera_m_UnderscanRows_get", (swig_wrapper_func) _wrap_CApnCamera_m_UnderscanRows_get, NULL},
    { SWIG_prefix "CApnCamera_m_OverscanRows_set", (swig_wrapper_func) _wrap_CApnCamera_m_OverscanRows_set, NULL},
    { SWIG_prefix "CApnCamera_m_OverscanRows_get", (swig_wrapper_func) _wrap_CApnCamera_m_OverscanRows_get, NULL},
    { SWIG_prefix "CApnCamera_m_VFlushBinning_set", (swig_wrapper_func) _wrap_CApnCamera_m_VFlushBinning_set, NULL},
    { SWIG_prefix "CApnCamera_m_VFlushBinning_get", (swig_wrapper_func) _wrap_CApnCamera_m_VFlushBinning_get, NULL},
    { SWIG_prefix "CApnCamera_m_HFlushDisable_set", (swig_wrapper_func) _wrap_CApnCamera_m_HFlushDisable_set, NULL},
    { SWIG_prefix "CApnCamera_m_HFlushDisable_get", (swig_wrapper_func) _wrap_CApnCamera_m_HFlushDisable_get, NULL},
    { SWIG_prefix "CApnCamera_m_ShutterCloseDelay_set", (swig_wrapper_func) _wrap_CApnCamera_m_ShutterCloseDelay_set, NULL},
    { SWIG_prefix "CApnCamera_m_ShutterCloseDelay_get", (swig_wrapper_func) _wrap_CApnCamera_m_ShutterCloseDelay_get, NULL},
    { SWIG_prefix "CApnCamera_m_PixelSizeX_set", (swig_wrapper_func) _wrap_CApnCamera_m_PixelSizeX_set, NULL},
    { SWIG_prefix "CApnCamera_m_PixelSizeX_get", (swig_wrapper_func) _wrap_CApnCamera_m_PixelSizeX_get, NULL},
    { SWIG_prefix "CApnCamera_m_PixelSizeY_set", (swig_wrapper_func) _wrap_CApnCamera_m_PixelSizeY_set, NULL},
    { SWIG_prefix "CApnCamera_m_PixelSizeY_get", (swig_wrapper_func) _wrap_CApnCamera_m_PixelSizeY_get, NULL},
    { SWIG_prefix "CApnCamera_m_Color_set", (swig_wrapper_func) _wrap_CApnCamera_m_Color_set, NULL},
    { SWIG_prefix "CApnCamera_m_Color_get", (swig_wrapper_func) _wrap_CApnCamera_m_Color_get, NULL},
    { SWIG_prefix "CApnCamera_m_ReportedGainSixteenBit_set", (swig_wrapper_func) _wrap_CApnCamera_m_ReportedGainSixteenBit_set, NULL},
    { SWIG_prefix "CApnCamera_m_ReportedGainSixteenBit_get", (swig_wrapper_func) _wrap_CApnCamera_m_ReportedGainSixteenBit_get, NULL},
    { SWIG_prefix "CApnCamera_m_MinSuggestedExpTime_set", (swig_wrapper_func) _wrap_CApnCamera_m_MinSuggestedExpTime_set, NULL},
    { SWIG_prefix "CApnCamera_m_MinSuggestedExpTime_get", (swig_wrapper_func) _wrap_CApnCamera_m_MinSuggestedExpTime_get, NULL},
    { SWIG_prefix "CApnCamera_m_TempRampRateOne_set", (swig_wrapper_func) _wrap_CApnCamera_m_TempRampRateOne_set, NULL},
    { SWIG_prefix "CApnCamera_m_TempRampRateOne_get", (swig_wrapper_func) _wrap_CApnCamera_m_TempRampRateOne_get, NULL},
    { SWIG_prefix "CApnCamera_m_TempRampRateTwo_set", (swig_wrapper_func) _wrap_CApnCamera_m_TempRampRateTwo_set, NULL},
    { SWIG_prefix "CApnCamera_m_TempRampRateTwo_get", (swig_wrapper_func) _wrap_CApnCamera_m_TempRampRateTwo_get, NULL},
    { SWIG_prefix "CApnCamera_m_DefaultGainTwelveBit_set", (swig_wrapper_func) _wrap_CApnCamera_m_DefaultGainTwelveBit_set, NULL},
    { SWIG_prefix "CApnCamera_m_DefaultGainTwelveBit_get", (swig_wrapper_func) _wrap_CApnCamera_m_DefaultGainTwelveBit_get, NULL},
    { SWIG_prefix "CApnCamera_m_DefaultOffsetTwelveBit_set", (swig_wrapper_func) _wrap_CApnCamera_m_DefaultOffsetTwelveBit_set, NULL},
    { SWIG_prefix "CApnCamera_m_DefaultOffsetTwelveBit_get", (swig_wrapper_func) _wrap_CApnCamera_m_DefaultOffsetTwelveBit_get, NULL},
    { SWIG_prefix "CApnCamera_m_DefaultRVoltage_set", (swig_wrapper_func) _wrap_CApnCamera_m_DefaultRVoltage_set, NULL},
    { SWIG_prefix "CApnCamera_m_DefaultRVoltage_get", (swig_wrapper_func) _wrap_CApnCamera_m_DefaultRVoltage_get, NULL},
    { SWIG_prefix "CApnCamera", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_CApnCamera},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_CApnCamera[] = {{"_p_CApnCamera", 0, "CApnCamera *", &_wrap_class_CApnCamera},{"_p_CApnCamera"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_CApnCamera, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
return TCL_OK;
}

