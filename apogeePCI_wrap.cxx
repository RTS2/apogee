/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#       endif
#endif
#else
#       define SWIGEXPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef struct swig_type_info {
  char  *name;                 
  void *(*converter)(void *);
  char  *str;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE
SWIGEXPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGEXPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGEXPORT(void *) SWIG_TypeCast(swig_type_info *, void *);
#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  while (s) {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    s = s->next;
  }
  return 0;
}

/* Cast a pointer (needed for C++ inheritance */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(void *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

#endif

#ifdef __cplusplus
}
#endif




/*
 * $Header: /cvs/projects/SWIG/Lib/tcl/swigtcl8.swg,v 1.8 2000/09/02 16:25:29 beazley Exp $
 * 
 * swigtcl8.swg
 */

#include <tcl.h>
#include <stdlib.h>
#include <stdarg.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef SWIG_NOINCLUDE
SWIGEXPORT(int) SWIG_ConvertPtrFromString(Tcl_Interp *, char *, void **, swig_type_info *);
SWIGEXPORT(int) SWIG_ConvertPtr(Tcl_Interp *, Tcl_Obj *, void **, swig_type_info *);
SWIGEXPORT(void) SWIG_MakePtr(char *, void *, swig_type_info *);
SWIGEXPORT(Tcl_Obj *) SWIG_NewPointerObj(void *, swig_type_info *);
SWIGEXPORT(int) SWIG_GetArgs(Tcl_Interp *, int, Tcl_Obj *CONST [], const char *, ...);
SWIGEXPORT(char *) SWIG_PointerTypeFromString(char *c);
#else

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtrFromString(Tcl_Interp *interp, char *c, void **ptr, swig_type_info *ty)
{
  unsigned long p;
  register int d;
  swig_type_info *tc;
  p = 0;
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return TCL_OK;
    Tcl_SetResult(interp,"Type error. Expected a pointer", TCL_STATIC);
    return TCL_ERROR;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if ((d >= '0') && (d <= '9'))
      p = (p << 4) + (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      p = (p << 4) + (d - ('a'-10));
    else
      break; 
    c++;
  }
  *ptr = (void *) p;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) {
      Tcl_SetResult(interp,"Type error. Expected ", TCL_STATIC);
      Tcl_AppendElement(interp, ty->name);
      return TCL_ERROR;
    }
    *ptr = SWIG_TypeCast(tc,(void *)p);
  }
  return TCL_OK;
}


/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty)
{
  return SWIG_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty);
}


/* Convert a pointer value */
SWIGRUNTIME(char *)
SWIG_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while (d = *c) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Take a pointer and convert it to a string */
SWIGRUNTIME(void) 
SWIG_MakePtr(char *c, void *ptr, swig_type_info *ty) {
  static char hex[17] = "0123456789abcdef";
  unsigned long p, s;
  char result[24], *r; 
  r = result;
  p = (unsigned long) ptr;
  if (p > 0) {
    while (p > 0) {
      s = p & 0xf;
      *(r++) = hex[s];
      p = p >> 4;
    }
    *r = '_';
    while (r >= result)
      *(c++) = *(r--);
    strcpy (c, ty->name);
  } else {
    strcpy (c, "NULL");
  }
}

/* Create a new pointer object */
SWIGRUNTIME(Tcl_Obj *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type) {
  char result[256];
  Tcl_Obj *robj;
  SWIG_MakePtr(result,ptr,type);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

/* Get arguments */
SWIGRUNTIME(int)
SWIG_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...)
{
  int        argno = 0, opt = 0, tempi;
  int        us = 0;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
	Tcl_SetResult(interp,"Wrong # args. ", TCL_STATIC);
	goto argerror;
      } else {
	va_end(ap);
	return TCL_OK;
      }
    }
    vptr = va_arg(ap,void *);
    if (vptr) {
      us = 0;
      if (*c == 'u') {
	us = 1;
	c++;
      }
      switch(*c) {
      case 'i':
      case 'l':
      case 'h':
      case 'b':
	if (Tcl_GetIntFromObj(interp,objv[argno+1],&tempi) != TCL_OK) goto argerror;
	if (*c == 'i') *((int *)vptr) = tempi;
	else if (*c == 'l') *((long *)vptr) = tempi;
	else if (*c == 'h') *((short*)vptr) = tempi;
	else if (*c == 'b') *((unsigned char *)vptr) = tempi;
	break;
      case 'f':
      case 'd':
	if (Tcl_GetDoubleFromObj(interp,objv[argno+1],&tempd) != TCL_OK) goto argerror;
	if (*c == 'f') *((float *) vptr) = tempd;
	else if (*c == 'd') *((double*) vptr) = tempd;
	break;
      case 's':
	if (*(c+1) == '#') {
	  int *vlptr = (int *) va_arg(ap, void *);
	  *((char **) vptr) = Tcl_GetStringFromObj(objv[argno+1], vlptr);
	  c++;
	} else {
	  *((char **)vptr) = Tcl_GetStringFromObj(objv[argno+1],NULL);
	}
	break;
      case 'c':
	*((char *)vptr) = *(Tcl_GetStringFromObj(objv[argno+1],NULL));
	break;
      case 'p':
	ty = (swig_type_info *) va_arg(ap, void *);
	if (SWIG_ConvertPtr(interp, objv[argno+1], (void **) vptr, ty) == TCL_ERROR) goto argerror;
	break;
      case 'o':
	*((Tcl_Obj **)vptr) = objv[argno+1];
	break;
      default:
	break;
      }
    }
  }
  if ((objc-1) > argno) {
    Tcl_SetResult(interp,"Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;
  
 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno);
    Tcl_AppendResult(interp,strchr(fmt,':'), " argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#endif

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_CCameraIO swig_types[0] 
static swig_type_info *swig_types[2];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Apogee_pci_Init
#define SWIG_name    "apogee_pci"
#define SWIG_prefix  ""
#define SWIG_version "0.0"
     
#include "CameraIO_Linux.h" 

#ifdef __cplusplus
extern "C" {
#endif
static int
_wrap_new_CCameraIO(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_CCameraIO ") == TCL_ERROR) SWIG_fail;
    result = (CCameraIO *)new CCameraIO();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_delete_CCameraIO(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":delete_CCameraIO self ") == TCL_ERROR) SWIG_fail;
    delete arg1;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_InitDriver(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_InitDriver self camnum ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->InitDriver(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_ReadLine(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    long arg2 ;
    long arg3 ;
    unsigned short *arg4 = (unsigned short *) 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_ReadLine self SkipPixels Pixels pLineBuffer ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->ReadLine(arg2,arg3,arg4);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_Write(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_Write self reg val ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->Write(arg2,arg3);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_Read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short arg2 ;
    unsigned short *arg3 = 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_Read self reg val ") == TCL_ERROR) SWIG_fail;
    result = (long)(arg1)->Read(arg2,*arg3);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_read_Status(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_read_Status self ") == TCL_ERROR) SWIG_fail;
    result = (int)(arg1)->read_Status();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_read_Present(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_read_Present self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_Present();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_read_Shutter(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_read_Shutter self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_Shutter();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_write_Shutter(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_write_Shutter self val ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_Shutter(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_read_ForceShutterOpen(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_read_ForceShutterOpen self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_ForceShutterOpen();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_write_ForceShutterOpen(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_write_ForceShutterOpen self val ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_ForceShutterOpen(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_read_LongCable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_read_LongCable self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_LongCable();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_write_LongCable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_write_LongCable self val ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_LongCable(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_read_Mode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_read_Mode self ") == TCL_ERROR) SWIG_fail;
    result = (short)(arg1)->read_Mode();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_write_Mode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_write_Mode self val ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_Mode(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_read_TestBits(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_read_TestBits self ") == TCL_ERROR) SWIG_fail;
    result = (short)(arg1)->read_TestBits();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_write_TestBits(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_write_TestBits self val ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_TestBits(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_read_Test2Bits(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_read_Test2Bits self ") == TCL_ERROR) SWIG_fail;
    result = (short)(arg1)->read_Test2Bits();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_write_Test2Bits(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_write_Test2Bits self val ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_Test2Bits(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_read_FastReadout(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_read_FastReadout self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_FastReadout();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_write_FastReadout(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_write_FastReadout self val ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_FastReadout(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_read_UseTrigger(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_read_UseTrigger self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->read_UseTrigger();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_write_UseTrigger(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_write_UseTrigger self val ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_UseTrigger(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_HighPriority_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_HighPriority_set self m_HighPriority ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_HighPriority = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_HighPriority_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_HighPriority_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_HighPriority);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_PPRepeat_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_PPRepeat_set self m_PPRepeat ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_PPRepeat = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_PPRepeat_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_PPRepeat_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_PPRepeat);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_DataBits_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_DataBits_set self m_DataBits ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_DataBits = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_DataBits_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_DataBits_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_DataBits);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_FastShutter_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_FastShutter_set self m_FastShutter ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_FastShutter = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_FastShutter_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_FastShutter_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_FastShutter);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_GuiderRelays_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_GuiderRelays_set self m_GuiderRelays ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_GuiderRelays = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_GuiderRelays_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_GuiderRelays_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_GuiderRelays);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_MaxBinX_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_MaxBinX_set self m_MaxBinX ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_MaxBinX = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_MaxBinX_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_MaxBinX_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_MaxBinX);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_MaxBinY_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_MaxBinY_set self m_MaxBinY ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_MaxBinY = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_MaxBinY_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_MaxBinY_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_MaxBinY);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_MaxExposure_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_MaxExposure_set self m_MaxExposure ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_MaxExposure = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_MaxExposure_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_MaxExposure_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_MaxExposure);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_MinExposure_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_MinExposure_set self m_MinExposure ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_MinExposure = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_MinExposure_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_MinExposure_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_MinExposure);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Timeout_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Timeout_set self m_Timeout ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_Timeout = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Timeout_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Timeout_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_Timeout);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_read_CoolerSetPoint(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_read_CoolerSetPoint self ") == TCL_ERROR) SWIG_fail;
    result = (double)(arg1)->read_CoolerSetPoint();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_write_CoolerSetPoint(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_write_CoolerSetPoint self val ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_CoolerSetPoint(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_read_CoolerStatus(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_read_CoolerStatus self ") == TCL_ERROR) SWIG_fail;
    result = (int)(arg1)->read_CoolerStatus();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_read_CoolerMode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_read_CoolerMode self ") == TCL_ERROR) SWIG_fail;
    result = (int)(arg1)->read_CoolerMode();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_write_CoolerMode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_write_CoolerMode self val ") == TCL_ERROR) SWIG_fail;
    (arg1)->write_CoolerMode((Camera_CoolerMode )arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_read_Temperature(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_read_Temperature self ") == TCL_ERROR) SWIG_fail;
    result = (double)(arg1)->read_Temperature();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_TempControl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_TempControl_set self m_TempControl ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_TempControl = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_TempControl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_TempControl_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_TempControl);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_TempCalibration_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_TempCalibration_set self m_TempCalibration ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_TempCalibration = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_TempCalibration_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_TempCalibration_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_TempCalibration);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_TempScale_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_TempScale_set self m_TempScale ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_TempScale = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_TempScale_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_TempScale_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_TempScale);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_BinX_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_BinX_set self m_BinX ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_BinX = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_BinX_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_BinX_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_BinX);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_BinY_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_BinY_set self m_BinY ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_BinY = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_BinY_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_BinY_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_BinY);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_StartX_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_StartX_set self m_StartX ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_StartX = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_StartX_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_StartX_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_StartX);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_StartY_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_StartY_set self m_StartY ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_StartY = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_StartY_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_StartY_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_StartY);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_NumX_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_NumX_set self m_NumX ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_NumX = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_NumX_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_NumX_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_NumX);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_NumY_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_NumY_set self m_NumY ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_NumY = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_NumY_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_NumY_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_NumY);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Columns_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Columns_set self m_Columns ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_Columns = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Columns_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Columns_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_Columns);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Rows_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Rows_set self m_Rows ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_Rows = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Rows_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Rows_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_Rows);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ImgColumns_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ImgColumns_set self m_ImgColumns ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ImgColumns = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ImgColumns_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ImgColumns_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ImgColumns);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ImgRows_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ImgRows_set self m_ImgRows ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ImgRows = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ImgRows_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ImgRows_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ImgRows);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_SkipC_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_SkipC_set self m_SkipC ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_SkipC = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_SkipC_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_SkipC_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_SkipC);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_SkipR_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_SkipR_set self m_SkipR ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_SkipR = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_SkipR_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_SkipR_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_SkipR);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_HFlush_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_HFlush_set self m_HFlush ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_HFlush = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_HFlush_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_HFlush_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_HFlush);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_VFlush_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_VFlush_set self m_VFlush ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_VFlush = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_VFlush_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_VFlush_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_VFlush);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_BIC_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_BIC_set self m_BIC ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_BIC = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_BIC_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_BIC_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_BIC);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_BIR_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_BIR_set self m_BIR ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_BIR = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_BIR_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_BIR_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_BIR);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Sensor_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    char *arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Sensor_set self m_Sensor ") == TCL_ERROR) SWIG_fail;
    {
        if (arg2) strncpy(arg1->m_Sensor,arg2,256);
        else arg1->m_Sensor[0] = 0;
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Sensor_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    char *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Sensor_get self ") == TCL_ERROR) SWIG_fail;
    result = (char *)(char *) ((arg1)->m_Sensor);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Color_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Color_set self m_Color ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_Color = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Color_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Color_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_Color);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Noise_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Noise_set self m_Noise ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_Noise = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Noise_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Noise_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_Noise);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Gain_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Gain_set self m_Gain ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_Gain = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Gain_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Gain_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_Gain);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_PixelXSize_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_PixelXSize_set self m_PixelXSize ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_PixelXSize = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_PixelXSize_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_PixelXSize_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_PixelXSize);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_PixelYSize_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_PixelYSize_set self m_PixelYSize ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_PixelYSize = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_PixelYSize_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_PixelYSize_get self ") == TCL_ERROR) SWIG_fail;
    result = (double) ((arg1)->m_PixelYSize);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_Reset(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_Reset self ") == TCL_ERROR) SWIG_fail;
    (arg1)->Reset();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_Flush(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 = (short) -1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_Flush self Rows ") == TCL_ERROR) SWIG_fail;
    (arg1)->Flush(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_AuxOutput(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned char arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_AuxOutput self val ") == TCL_ERROR) SWIG_fail;
    (arg1)->AuxOutput(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_RegWrite(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    unsigned short arg3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_RegWrite self reg val ") == TCL_ERROR) SWIG_fail;
    (arg1)->RegWrite(arg2,arg3);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_RegRead(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    unsigned short *arg3 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_RegRead self reg val ") == TCL_ERROR) SWIG_fail;
    (arg1)->RegRead(arg2,*arg3);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_FilterHome(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_FilterHome self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->FilterHome();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_FilterSet(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_FilterSet self Slot ") == TCL_ERROR) SWIG_fail;
    (arg1)->FilterSet(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_Expose(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double arg2 ;
    bool arg3 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_Expose self Duration Light ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->Expose(arg2,arg3);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_GetImage(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short *arg2 = (unsigned short *) 0 ;
    short *arg3 = 0 ;
    short *arg4 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_GetImage self pImageData xSize ySize ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->GetImage(arg2,*arg3,*arg4);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_BufferImage(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    char *arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_BufferImage self bufferName ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->BufferImage(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_DigitizeLine(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_DigitizeLine self ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->DigitizeLine();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_GetLine(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short *arg2 = (unsigned short *) 0 ;
    short *arg3 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_GetLine self pLineData xSize ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->GetLine(arg2,*arg3);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_BufferDriftScan(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    char *arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_BufferDriftScan self bufferName delay rowCount nblock npipe ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->BufferDriftScan(arg2,arg3,arg4,arg5,arg6);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_Snap(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double arg2 ;
    bool arg3 ;
    unsigned short *arg4 = (unsigned short *) 0 ;
    short *arg5 = 0 ;
    short *arg6 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_Snap self Duration Light pImageData xSize ySize ") == TCL_ERROR) SWIG_fail;
    result = (bool)(arg1)->Snap(arg2,arg3,arg4,*arg5,*arg6);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_TDI_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_TDI_set self m_TDI ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_TDI = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_TDI_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_TDI_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_TDI);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_WaitingforTrigger_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_WaitingforTrigger_set self m_WaitingforTrigger ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_WaitingforTrigger = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_WaitingforTrigger_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_WaitingforTrigger_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_WaitingforTrigger);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_WaitingforImage_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_WaitingforImage_set self m_WaitingforImage ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_WaitingforImage = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_WaitingforImage_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_WaitingforImage_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_WaitingforImage);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_WaitingforLine_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_WaitingforLine_set self m_WaitingforLine ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_WaitingforLine = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_WaitingforLine_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_WaitingforLine_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_WaitingforLine);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_RegisterOffset_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_RegisterOffset_set self m_RegisterOffset ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_RegisterOffset = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_RegisterOffset_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_RegisterOffset_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_RegisterOffset);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_FilterPosition_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_FilterPosition_set self m_FilterPosition ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_FilterPosition = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_FilterPosition_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_FilterPosition_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_FilterPosition);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_FilterStepPos_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_FilterStepPos_set self m_FilterStepPos ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_FilterStepPos = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_FilterStepPos_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_FilterStepPos_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_FilterStepPos);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Shutter_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Shutter_set self m_Shutter ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_Shutter = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Shutter_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Shutter_get self ") == TCL_ERROR) SWIG_fail;
    result = (bool) ((arg1)->m_Shutter);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Status_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Status_set self m_Status ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_Status = (Camera_Status )arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Status_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Status_get self ") == TCL_ERROR) SWIG_fail;
    result = (int) ((arg1)->m_Status);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Interface_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Interface_set self m_Interface ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_Interface = (Camera_Interface )arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_Interface_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_Interface_get self ") == TCL_ERROR) SWIG_fail;
    result = (int) ((arg1)->m_Interface);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_SensorType_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_SensorType_set self m_SensorType ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_SensorType = (Camera_SensorType )arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_SensorType_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_SensorType_get self ") == TCL_ERROR) SWIG_fail;
    result = (int) ((arg1)->m_SensorType);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_CoolerStatus_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_CoolerStatus_set self m_CoolerStatus ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_CoolerStatus = (Camera_CoolerStatus )arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_CoolerStatus_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_CoolerStatus_get self ") == TCL_ERROR) SWIG_fail;
    result = (int) ((arg1)->m_CoolerStatus);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_IRQMask_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_IRQMask_set self m_IRQMask ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_IRQMask = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_IRQMask_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_IRQMask_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned int) ((arg1)->m_IRQMask);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureBinX_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureBinX_set self m_ExposureBinX ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureBinX = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureBinX_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureBinX_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ExposureBinX);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureBinY_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureBinY_set self m_ExposureBinY ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureBinY = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureBinY_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureBinY_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ExposureBinY);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureStartX_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureStartX_set self m_ExposureStartX ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureStartX = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureStartX_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureStartX_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ExposureStartX);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureStartY_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureStartY_set self m_ExposureStartY ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureStartY = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureStartY_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureStartY_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ExposureStartY);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureNumX_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureNumX_set self m_ExposureNumX ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureNumX = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureNumX_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureNumX_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ExposureNumX);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureNumY_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureNumY_set self m_ExposureNumY ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureNumY = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureNumY_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureNumY_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ExposureNumY);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureColumns_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureColumns_set self m_ExposureColumns ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureColumns = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureColumns_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureColumns_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ExposureColumns);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureRows_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureRows_set self m_ExposureRows ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureRows = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureRows_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureRows_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ExposureRows);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureSkipC_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureSkipC_set self m_ExposureSkipC ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureSkipC = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureSkipC_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureSkipC_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ExposureSkipC);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureSkipR_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureSkipR_set self m_ExposureSkipR ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureSkipR = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureSkipR_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureSkipR_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ExposureSkipR);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureHFlush_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureHFlush_set self m_ExposureHFlush ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureHFlush = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureHFlush_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureHFlush_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ExposureHFlush);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureVFlush_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureVFlush_set self m_ExposureVFlush ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureVFlush = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureVFlush_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureVFlush_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ExposureVFlush);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureBIC_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureBIC_set self m_ExposureBIC ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureBIC = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureBIC_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureBIC_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ExposureBIC);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureBIR_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureBIR_set self m_ExposureBIR ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureBIR = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureBIR_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureBIR_get self ") == TCL_ERROR) SWIG_fail;
    result = (short) ((arg1)->m_ExposureBIR);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureAIC_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureAIC_set self m_ExposureAIC ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureAIC = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureAIC_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureAIC_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_ExposureAIC);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureRemainingLines_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureRemainingLines_set self m_ExposureRemainingLines ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureRemainingLines = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureRemainingLines_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureRemainingLines_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_ExposureRemainingLines);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureAIR_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureAIR_set self m_ExposureAIR ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_ExposureAIR = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_ExposureAIR_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_ExposureAIR_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_ExposureAIR);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_RegShadow_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short *arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_RegShadow_set self m_RegShadow ") == TCL_ERROR) SWIG_fail;
    {
        int ii;
        unsigned short *b = (unsigned short *) arg1->m_RegShadow;
        for (ii = 0; ii < NumWriteRegisters; ii++) b[ii] = *((unsigned short *) arg2 + ii);
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_RegShadow_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_RegShadow_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short *)(unsigned short *) ((arg1)->m_RegShadow);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_FastShutterBits_Mode_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_FastShutterBits_Mode_set self m_FastShutterBits_Mode ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_FastShutterBits_Mode = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_FastShutterBits_Mode_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_FastShutterBits_Mode_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_FastShutterBits_Mode);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_FastShutterBits_Test_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_FastShutterBits_Test_set self m_FastShutterBits_Test ") == TCL_ERROR) SWIG_fail;
    if (arg1) (arg1)->m_FastShutterBits_Test = arg2;
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_m_FastShutterBits_Test_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short result;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_m_FastShutterBits_Test_get self ") == TCL_ERROR) SWIG_fail;
    result = (unsigned short) ((arg1)->m_FastShutterBits_Test);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_LoadLineCounter(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_LoadLineCounter self rows ") == TCL_ERROR) SWIG_fail;
    (arg1)->LoadLineCounter(arg2);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_LoadColumnLayout(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    unsigned short arg4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_LoadColumnLayout self aic bic pixels ") == TCL_ERROR) SWIG_fail;
    (arg1)->LoadColumnLayout(arg2,arg3,arg4);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_LoadTimerAndBinning(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    double arg2 ;
    unsigned short arg3 ;
    unsigned short arg4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_LoadTimerAndBinning self Duration HBin VBin ") == TCL_ERROR) SWIG_fail;
    (arg1)->LoadTimerAndBinning(arg2,arg3,arg4);
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_StartFlushing(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_StartFlushing self ") == TCL_ERROR) SWIG_fail;
    (arg1)->StartFlushing();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_StopFlushing(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_StopFlushing self ") == TCL_ERROR) SWIG_fail;
    (arg1)->StopFlushing();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_CCameraIO_InitDefaults(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    CCameraIO *arg1 = (CCameraIO *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,":CCameraIO_InitDefaults self ") == TCL_ERROR) SWIG_fail;
    (arg1)->InitDefaults();
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_CCameraIO(void *obj) {
CCameraIO *arg1 = (CCameraIO *) obj;
delete arg1;
}
static swig_method swig_CCameraIO_methods[] = {
    {"InitDriver", _wrap_CCameraIO_InitDriver}, 
    {"ReadLine", _wrap_CCameraIO_ReadLine}, 
    {"Write", _wrap_CCameraIO_Write}, 
    {"Read", _wrap_CCameraIO_Read}, 
    {"read_Status", _wrap_CCameraIO_read_Status}, 
    {"read_Present", _wrap_CCameraIO_read_Present}, 
    {"read_Shutter", _wrap_CCameraIO_read_Shutter}, 
    {"write_Shutter", _wrap_CCameraIO_write_Shutter}, 
    {"read_ForceShutterOpen", _wrap_CCameraIO_read_ForceShutterOpen}, 
    {"write_ForceShutterOpen", _wrap_CCameraIO_write_ForceShutterOpen}, 
    {"read_LongCable", _wrap_CCameraIO_read_LongCable}, 
    {"write_LongCable", _wrap_CCameraIO_write_LongCable}, 
    {"read_Mode", _wrap_CCameraIO_read_Mode}, 
    {"write_Mode", _wrap_CCameraIO_write_Mode}, 
    {"read_TestBits", _wrap_CCameraIO_read_TestBits}, 
    {"write_TestBits", _wrap_CCameraIO_write_TestBits}, 
    {"read_Test2Bits", _wrap_CCameraIO_read_Test2Bits}, 
    {"write_Test2Bits", _wrap_CCameraIO_write_Test2Bits}, 
    {"read_FastReadout", _wrap_CCameraIO_read_FastReadout}, 
    {"write_FastReadout", _wrap_CCameraIO_write_FastReadout}, 
    {"read_UseTrigger", _wrap_CCameraIO_read_UseTrigger}, 
    {"write_UseTrigger", _wrap_CCameraIO_write_UseTrigger}, 
    {"read_CoolerSetPoint", _wrap_CCameraIO_read_CoolerSetPoint}, 
    {"write_CoolerSetPoint", _wrap_CCameraIO_write_CoolerSetPoint}, 
    {"read_CoolerStatus", _wrap_CCameraIO_read_CoolerStatus}, 
    {"read_CoolerMode", _wrap_CCameraIO_read_CoolerMode}, 
    {"write_CoolerMode", _wrap_CCameraIO_write_CoolerMode}, 
    {"read_Temperature", _wrap_CCameraIO_read_Temperature}, 
    {"Reset", _wrap_CCameraIO_Reset}, 
    {"Flush", _wrap_CCameraIO_Flush}, 
    {"AuxOutput", _wrap_CCameraIO_AuxOutput}, 
    {"RegWrite", _wrap_CCameraIO_RegWrite}, 
    {"RegRead", _wrap_CCameraIO_RegRead}, 
    {"FilterHome", _wrap_CCameraIO_FilterHome}, 
    {"FilterSet", _wrap_CCameraIO_FilterSet}, 
    {"Expose", _wrap_CCameraIO_Expose}, 
    {"GetImage", _wrap_CCameraIO_GetImage}, 
    {"BufferImage", _wrap_CCameraIO_BufferImage}, 
    {"DigitizeLine", _wrap_CCameraIO_DigitizeLine}, 
    {"GetLine", _wrap_CCameraIO_GetLine}, 
    {"BufferDriftScan", _wrap_CCameraIO_BufferDriftScan}, 
    {"Snap", _wrap_CCameraIO_Snap}, 
    {"LoadLineCounter", _wrap_CCameraIO_LoadLineCounter}, 
    {"LoadColumnLayout", _wrap_CCameraIO_LoadColumnLayout}, 
    {"LoadTimerAndBinning", _wrap_CCameraIO_LoadTimerAndBinning}, 
    {"StartFlushing", _wrap_CCameraIO_StartFlushing}, 
    {"StopFlushing", _wrap_CCameraIO_StopFlushing}, 
    {"InitDefaults", _wrap_CCameraIO_InitDefaults}, 
    {0,0}
};
static swig_attribute swig_CCameraIO_attributes[] = {
    { "-m_HighPriority",_wrap_CCameraIO_m_HighPriority_get, _wrap_CCameraIO_m_HighPriority_set},
    { "-m_PPRepeat",_wrap_CCameraIO_m_PPRepeat_get, _wrap_CCameraIO_m_PPRepeat_set},
    { "-m_DataBits",_wrap_CCameraIO_m_DataBits_get, _wrap_CCameraIO_m_DataBits_set},
    { "-m_FastShutter",_wrap_CCameraIO_m_FastShutter_get, _wrap_CCameraIO_m_FastShutter_set},
    { "-m_GuiderRelays",_wrap_CCameraIO_m_GuiderRelays_get, _wrap_CCameraIO_m_GuiderRelays_set},
    { "-m_MaxBinX",_wrap_CCameraIO_m_MaxBinX_get, _wrap_CCameraIO_m_MaxBinX_set},
    { "-m_MaxBinY",_wrap_CCameraIO_m_MaxBinY_get, _wrap_CCameraIO_m_MaxBinY_set},
    { "-m_MaxExposure",_wrap_CCameraIO_m_MaxExposure_get, _wrap_CCameraIO_m_MaxExposure_set},
    { "-m_MinExposure",_wrap_CCameraIO_m_MinExposure_get, _wrap_CCameraIO_m_MinExposure_set},
    { "-m_Timeout",_wrap_CCameraIO_m_Timeout_get, _wrap_CCameraIO_m_Timeout_set},
    { "-m_TempControl",_wrap_CCameraIO_m_TempControl_get, _wrap_CCameraIO_m_TempControl_set},
    { "-m_TempCalibration",_wrap_CCameraIO_m_TempCalibration_get, _wrap_CCameraIO_m_TempCalibration_set},
    { "-m_TempScale",_wrap_CCameraIO_m_TempScale_get, _wrap_CCameraIO_m_TempScale_set},
    { "-m_BinX",_wrap_CCameraIO_m_BinX_get, _wrap_CCameraIO_m_BinX_set},
    { "-m_BinY",_wrap_CCameraIO_m_BinY_get, _wrap_CCameraIO_m_BinY_set},
    { "-m_StartX",_wrap_CCameraIO_m_StartX_get, _wrap_CCameraIO_m_StartX_set},
    { "-m_StartY",_wrap_CCameraIO_m_StartY_get, _wrap_CCameraIO_m_StartY_set},
    { "-m_NumX",_wrap_CCameraIO_m_NumX_get, _wrap_CCameraIO_m_NumX_set},
    { "-m_NumY",_wrap_CCameraIO_m_NumY_get, _wrap_CCameraIO_m_NumY_set},
    { "-m_Columns",_wrap_CCameraIO_m_Columns_get, _wrap_CCameraIO_m_Columns_set},
    { "-m_Rows",_wrap_CCameraIO_m_Rows_get, _wrap_CCameraIO_m_Rows_set},
    { "-m_ImgColumns",_wrap_CCameraIO_m_ImgColumns_get, _wrap_CCameraIO_m_ImgColumns_set},
    { "-m_ImgRows",_wrap_CCameraIO_m_ImgRows_get, _wrap_CCameraIO_m_ImgRows_set},
    { "-m_SkipC",_wrap_CCameraIO_m_SkipC_get, _wrap_CCameraIO_m_SkipC_set},
    { "-m_SkipR",_wrap_CCameraIO_m_SkipR_get, _wrap_CCameraIO_m_SkipR_set},
    { "-m_HFlush",_wrap_CCameraIO_m_HFlush_get, _wrap_CCameraIO_m_HFlush_set},
    { "-m_VFlush",_wrap_CCameraIO_m_VFlush_get, _wrap_CCameraIO_m_VFlush_set},
    { "-m_BIC",_wrap_CCameraIO_m_BIC_get, _wrap_CCameraIO_m_BIC_set},
    { "-m_BIR",_wrap_CCameraIO_m_BIR_get, _wrap_CCameraIO_m_BIR_set},
    { "-m_Sensor",_wrap_CCameraIO_m_Sensor_get, _wrap_CCameraIO_m_Sensor_set},
    { "-m_Color",_wrap_CCameraIO_m_Color_get, _wrap_CCameraIO_m_Color_set},
    { "-m_Noise",_wrap_CCameraIO_m_Noise_get, _wrap_CCameraIO_m_Noise_set},
    { "-m_Gain",_wrap_CCameraIO_m_Gain_get, _wrap_CCameraIO_m_Gain_set},
    { "-m_PixelXSize",_wrap_CCameraIO_m_PixelXSize_get, _wrap_CCameraIO_m_PixelXSize_set},
    { "-m_PixelYSize",_wrap_CCameraIO_m_PixelYSize_get, _wrap_CCameraIO_m_PixelYSize_set},
    { "-m_TDI",_wrap_CCameraIO_m_TDI_get, _wrap_CCameraIO_m_TDI_set},
    { "-m_WaitingforTrigger",_wrap_CCameraIO_m_WaitingforTrigger_get, _wrap_CCameraIO_m_WaitingforTrigger_set},
    { "-m_WaitingforImage",_wrap_CCameraIO_m_WaitingforImage_get, _wrap_CCameraIO_m_WaitingforImage_set},
    { "-m_WaitingforLine",_wrap_CCameraIO_m_WaitingforLine_get, _wrap_CCameraIO_m_WaitingforLine_set},
    { "-m_RegisterOffset",_wrap_CCameraIO_m_RegisterOffset_get, _wrap_CCameraIO_m_RegisterOffset_set},
    { "-m_FilterPosition",_wrap_CCameraIO_m_FilterPosition_get, _wrap_CCameraIO_m_FilterPosition_set},
    { "-m_FilterStepPos",_wrap_CCameraIO_m_FilterStepPos_get, _wrap_CCameraIO_m_FilterStepPos_set},
    { "-m_Shutter",_wrap_CCameraIO_m_Shutter_get, _wrap_CCameraIO_m_Shutter_set},
    { "-m_Status",_wrap_CCameraIO_m_Status_get, _wrap_CCameraIO_m_Status_set},
    { "-m_Interface",_wrap_CCameraIO_m_Interface_get, _wrap_CCameraIO_m_Interface_set},
    { "-m_SensorType",_wrap_CCameraIO_m_SensorType_get, _wrap_CCameraIO_m_SensorType_set},
    { "-m_CoolerStatus",_wrap_CCameraIO_m_CoolerStatus_get, _wrap_CCameraIO_m_CoolerStatus_set},
    { "-m_IRQMask",_wrap_CCameraIO_m_IRQMask_get, _wrap_CCameraIO_m_IRQMask_set},
    { "-m_ExposureBinX",_wrap_CCameraIO_m_ExposureBinX_get, _wrap_CCameraIO_m_ExposureBinX_set},
    { "-m_ExposureBinY",_wrap_CCameraIO_m_ExposureBinY_get, _wrap_CCameraIO_m_ExposureBinY_set},
    { "-m_ExposureStartX",_wrap_CCameraIO_m_ExposureStartX_get, _wrap_CCameraIO_m_ExposureStartX_set},
    { "-m_ExposureStartY",_wrap_CCameraIO_m_ExposureStartY_get, _wrap_CCameraIO_m_ExposureStartY_set},
    { "-m_ExposureNumX",_wrap_CCameraIO_m_ExposureNumX_get, _wrap_CCameraIO_m_ExposureNumX_set},
    { "-m_ExposureNumY",_wrap_CCameraIO_m_ExposureNumY_get, _wrap_CCameraIO_m_ExposureNumY_set},
    { "-m_ExposureColumns",_wrap_CCameraIO_m_ExposureColumns_get, _wrap_CCameraIO_m_ExposureColumns_set},
    { "-m_ExposureRows",_wrap_CCameraIO_m_ExposureRows_get, _wrap_CCameraIO_m_ExposureRows_set},
    { "-m_ExposureSkipC",_wrap_CCameraIO_m_ExposureSkipC_get, _wrap_CCameraIO_m_ExposureSkipC_set},
    { "-m_ExposureSkipR",_wrap_CCameraIO_m_ExposureSkipR_get, _wrap_CCameraIO_m_ExposureSkipR_set},
    { "-m_ExposureHFlush",_wrap_CCameraIO_m_ExposureHFlush_get, _wrap_CCameraIO_m_ExposureHFlush_set},
    { "-m_ExposureVFlush",_wrap_CCameraIO_m_ExposureVFlush_get, _wrap_CCameraIO_m_ExposureVFlush_set},
    { "-m_ExposureBIC",_wrap_CCameraIO_m_ExposureBIC_get, _wrap_CCameraIO_m_ExposureBIC_set},
    { "-m_ExposureBIR",_wrap_CCameraIO_m_ExposureBIR_get, _wrap_CCameraIO_m_ExposureBIR_set},
    { "-m_ExposureAIC",_wrap_CCameraIO_m_ExposureAIC_get, _wrap_CCameraIO_m_ExposureAIC_set},
    { "-m_ExposureRemainingLines",_wrap_CCameraIO_m_ExposureRemainingLines_get, _wrap_CCameraIO_m_ExposureRemainingLines_set},
    { "-m_ExposureAIR",_wrap_CCameraIO_m_ExposureAIR_get, _wrap_CCameraIO_m_ExposureAIR_set},
    { "-m_RegShadow",_wrap_CCameraIO_m_RegShadow_get, _wrap_CCameraIO_m_RegShadow_set},
    { "-m_FastShutterBits_Mode",_wrap_CCameraIO_m_FastShutterBits_Mode_get, _wrap_CCameraIO_m_FastShutterBits_Mode_set},
    { "-m_FastShutterBits_Test",_wrap_CCameraIO_m_FastShutterBits_Test_get, _wrap_CCameraIO_m_FastShutterBits_Test_set},
    {0,0,0}
};
static swig_class *swig_CCameraIO_bases[] = {0};
swig_class _wrap_class_CCameraIO = { "CCameraIO", &SWIGTYPE_p_CCameraIO,_wrap_new_CCameraIO, swig_delete_CCameraIO, swig_CCameraIO_methods, swig_CCameraIO_attributes, swig_CCameraIO_bases };

static swig_command_info swig_commands[] = {
    { SWIG_prefix "new_CCameraIO", (swig_wrapper_func) _wrap_new_CCameraIO, NULL},
    { SWIG_prefix "delete_CCameraIO", (swig_wrapper_func) _wrap_delete_CCameraIO, NULL},
    { SWIG_prefix "CCameraIO_InitDriver", (swig_wrapper_func) _wrap_CCameraIO_InitDriver, NULL},
    { SWIG_prefix "CCameraIO_ReadLine", (swig_wrapper_func) _wrap_CCameraIO_ReadLine, NULL},
    { SWIG_prefix "CCameraIO_Write", (swig_wrapper_func) _wrap_CCameraIO_Write, NULL},
    { SWIG_prefix "CCameraIO_Read", (swig_wrapper_func) _wrap_CCameraIO_Read, NULL},
    { SWIG_prefix "CCameraIO_read_Status", (swig_wrapper_func) _wrap_CCameraIO_read_Status, NULL},
    { SWIG_prefix "CCameraIO_read_Present", (swig_wrapper_func) _wrap_CCameraIO_read_Present, NULL},
    { SWIG_prefix "CCameraIO_read_Shutter", (swig_wrapper_func) _wrap_CCameraIO_read_Shutter, NULL},
    { SWIG_prefix "CCameraIO_write_Shutter", (swig_wrapper_func) _wrap_CCameraIO_write_Shutter, NULL},
    { SWIG_prefix "CCameraIO_read_ForceShutterOpen", (swig_wrapper_func) _wrap_CCameraIO_read_ForceShutterOpen, NULL},
    { SWIG_prefix "CCameraIO_write_ForceShutterOpen", (swig_wrapper_func) _wrap_CCameraIO_write_ForceShutterOpen, NULL},
    { SWIG_prefix "CCameraIO_read_LongCable", (swig_wrapper_func) _wrap_CCameraIO_read_LongCable, NULL},
    { SWIG_prefix "CCameraIO_write_LongCable", (swig_wrapper_func) _wrap_CCameraIO_write_LongCable, NULL},
    { SWIG_prefix "CCameraIO_read_Mode", (swig_wrapper_func) _wrap_CCameraIO_read_Mode, NULL},
    { SWIG_prefix "CCameraIO_write_Mode", (swig_wrapper_func) _wrap_CCameraIO_write_Mode, NULL},
    { SWIG_prefix "CCameraIO_read_TestBits", (swig_wrapper_func) _wrap_CCameraIO_read_TestBits, NULL},
    { SWIG_prefix "CCameraIO_write_TestBits", (swig_wrapper_func) _wrap_CCameraIO_write_TestBits, NULL},
    { SWIG_prefix "CCameraIO_read_Test2Bits", (swig_wrapper_func) _wrap_CCameraIO_read_Test2Bits, NULL},
    { SWIG_prefix "CCameraIO_write_Test2Bits", (swig_wrapper_func) _wrap_CCameraIO_write_Test2Bits, NULL},
    { SWIG_prefix "CCameraIO_read_FastReadout", (swig_wrapper_func) _wrap_CCameraIO_read_FastReadout, NULL},
    { SWIG_prefix "CCameraIO_write_FastReadout", (swig_wrapper_func) _wrap_CCameraIO_write_FastReadout, NULL},
    { SWIG_prefix "CCameraIO_read_UseTrigger", (swig_wrapper_func) _wrap_CCameraIO_read_UseTrigger, NULL},
    { SWIG_prefix "CCameraIO_write_UseTrigger", (swig_wrapper_func) _wrap_CCameraIO_write_UseTrigger, NULL},
    { SWIG_prefix "CCameraIO_m_HighPriority_set", (swig_wrapper_func) _wrap_CCameraIO_m_HighPriority_set, NULL},
    { SWIG_prefix "CCameraIO_m_HighPriority_get", (swig_wrapper_func) _wrap_CCameraIO_m_HighPriority_get, NULL},
    { SWIG_prefix "CCameraIO_m_PPRepeat_set", (swig_wrapper_func) _wrap_CCameraIO_m_PPRepeat_set, NULL},
    { SWIG_prefix "CCameraIO_m_PPRepeat_get", (swig_wrapper_func) _wrap_CCameraIO_m_PPRepeat_get, NULL},
    { SWIG_prefix "CCameraIO_m_DataBits_set", (swig_wrapper_func) _wrap_CCameraIO_m_DataBits_set, NULL},
    { SWIG_prefix "CCameraIO_m_DataBits_get", (swig_wrapper_func) _wrap_CCameraIO_m_DataBits_get, NULL},
    { SWIG_prefix "CCameraIO_m_FastShutter_set", (swig_wrapper_func) _wrap_CCameraIO_m_FastShutter_set, NULL},
    { SWIG_prefix "CCameraIO_m_FastShutter_get", (swig_wrapper_func) _wrap_CCameraIO_m_FastShutter_get, NULL},
    { SWIG_prefix "CCameraIO_m_GuiderRelays_set", (swig_wrapper_func) _wrap_CCameraIO_m_GuiderRelays_set, NULL},
    { SWIG_prefix "CCameraIO_m_GuiderRelays_get", (swig_wrapper_func) _wrap_CCameraIO_m_GuiderRelays_get, NULL},
    { SWIG_prefix "CCameraIO_m_MaxBinX_set", (swig_wrapper_func) _wrap_CCameraIO_m_MaxBinX_set, NULL},
    { SWIG_prefix "CCameraIO_m_MaxBinX_get", (swig_wrapper_func) _wrap_CCameraIO_m_MaxBinX_get, NULL},
    { SWIG_prefix "CCameraIO_m_MaxBinY_set", (swig_wrapper_func) _wrap_CCameraIO_m_MaxBinY_set, NULL},
    { SWIG_prefix "CCameraIO_m_MaxBinY_get", (swig_wrapper_func) _wrap_CCameraIO_m_MaxBinY_get, NULL},
    { SWIG_prefix "CCameraIO_m_MaxExposure_set", (swig_wrapper_func) _wrap_CCameraIO_m_MaxExposure_set, NULL},
    { SWIG_prefix "CCameraIO_m_MaxExposure_get", (swig_wrapper_func) _wrap_CCameraIO_m_MaxExposure_get, NULL},
    { SWIG_prefix "CCameraIO_m_MinExposure_set", (swig_wrapper_func) _wrap_CCameraIO_m_MinExposure_set, NULL},
    { SWIG_prefix "CCameraIO_m_MinExposure_get", (swig_wrapper_func) _wrap_CCameraIO_m_MinExposure_get, NULL},
    { SWIG_prefix "CCameraIO_m_Timeout_set", (swig_wrapper_func) _wrap_CCameraIO_m_Timeout_set, NULL},
    { SWIG_prefix "CCameraIO_m_Timeout_get", (swig_wrapper_func) _wrap_CCameraIO_m_Timeout_get, NULL},
    { SWIG_prefix "CCameraIO_read_CoolerSetPoint", (swig_wrapper_func) _wrap_CCameraIO_read_CoolerSetPoint, NULL},
    { SWIG_prefix "CCameraIO_write_CoolerSetPoint", (swig_wrapper_func) _wrap_CCameraIO_write_CoolerSetPoint, NULL},
    { SWIG_prefix "CCameraIO_read_CoolerStatus", (swig_wrapper_func) _wrap_CCameraIO_read_CoolerStatus, NULL},
    { SWIG_prefix "CCameraIO_read_CoolerMode", (swig_wrapper_func) _wrap_CCameraIO_read_CoolerMode, NULL},
    { SWIG_prefix "CCameraIO_write_CoolerMode", (swig_wrapper_func) _wrap_CCameraIO_write_CoolerMode, NULL},
    { SWIG_prefix "CCameraIO_read_Temperature", (swig_wrapper_func) _wrap_CCameraIO_read_Temperature, NULL},
    { SWIG_prefix "CCameraIO_m_TempControl_set", (swig_wrapper_func) _wrap_CCameraIO_m_TempControl_set, NULL},
    { SWIG_prefix "CCameraIO_m_TempControl_get", (swig_wrapper_func) _wrap_CCameraIO_m_TempControl_get, NULL},
    { SWIG_prefix "CCameraIO_m_TempCalibration_set", (swig_wrapper_func) _wrap_CCameraIO_m_TempCalibration_set, NULL},
    { SWIG_prefix "CCameraIO_m_TempCalibration_get", (swig_wrapper_func) _wrap_CCameraIO_m_TempCalibration_get, NULL},
    { SWIG_prefix "CCameraIO_m_TempScale_set", (swig_wrapper_func) _wrap_CCameraIO_m_TempScale_set, NULL},
    { SWIG_prefix "CCameraIO_m_TempScale_get", (swig_wrapper_func) _wrap_CCameraIO_m_TempScale_get, NULL},
    { SWIG_prefix "CCameraIO_m_BinX_set", (swig_wrapper_func) _wrap_CCameraIO_m_BinX_set, NULL},
    { SWIG_prefix "CCameraIO_m_BinX_get", (swig_wrapper_func) _wrap_CCameraIO_m_BinX_get, NULL},
    { SWIG_prefix "CCameraIO_m_BinY_set", (swig_wrapper_func) _wrap_CCameraIO_m_BinY_set, NULL},
    { SWIG_prefix "CCameraIO_m_BinY_get", (swig_wrapper_func) _wrap_CCameraIO_m_BinY_get, NULL},
    { SWIG_prefix "CCameraIO_m_StartX_set", (swig_wrapper_func) _wrap_CCameraIO_m_StartX_set, NULL},
    { SWIG_prefix "CCameraIO_m_StartX_get", (swig_wrapper_func) _wrap_CCameraIO_m_StartX_get, NULL},
    { SWIG_prefix "CCameraIO_m_StartY_set", (swig_wrapper_func) _wrap_CCameraIO_m_StartY_set, NULL},
    { SWIG_prefix "CCameraIO_m_StartY_get", (swig_wrapper_func) _wrap_CCameraIO_m_StartY_get, NULL},
    { SWIG_prefix "CCameraIO_m_NumX_set", (swig_wrapper_func) _wrap_CCameraIO_m_NumX_set, NULL},
    { SWIG_prefix "CCameraIO_m_NumX_get", (swig_wrapper_func) _wrap_CCameraIO_m_NumX_get, NULL},
    { SWIG_prefix "CCameraIO_m_NumY_set", (swig_wrapper_func) _wrap_CCameraIO_m_NumY_set, NULL},
    { SWIG_prefix "CCameraIO_m_NumY_get", (swig_wrapper_func) _wrap_CCameraIO_m_NumY_get, NULL},
    { SWIG_prefix "CCameraIO_m_Columns_set", (swig_wrapper_func) _wrap_CCameraIO_m_Columns_set, NULL},
    { SWIG_prefix "CCameraIO_m_Columns_get", (swig_wrapper_func) _wrap_CCameraIO_m_Columns_get, NULL},
    { SWIG_prefix "CCameraIO_m_Rows_set", (swig_wrapper_func) _wrap_CCameraIO_m_Rows_set, NULL},
    { SWIG_prefix "CCameraIO_m_Rows_get", (swig_wrapper_func) _wrap_CCameraIO_m_Rows_get, NULL},
    { SWIG_prefix "CCameraIO_m_ImgColumns_set", (swig_wrapper_func) _wrap_CCameraIO_m_ImgColumns_set, NULL},
    { SWIG_prefix "CCameraIO_m_ImgColumns_get", (swig_wrapper_func) _wrap_CCameraIO_m_ImgColumns_get, NULL},
    { SWIG_prefix "CCameraIO_m_ImgRows_set", (swig_wrapper_func) _wrap_CCameraIO_m_ImgRows_set, NULL},
    { SWIG_prefix "CCameraIO_m_ImgRows_get", (swig_wrapper_func) _wrap_CCameraIO_m_ImgRows_get, NULL},
    { SWIG_prefix "CCameraIO_m_SkipC_set", (swig_wrapper_func) _wrap_CCameraIO_m_SkipC_set, NULL},
    { SWIG_prefix "CCameraIO_m_SkipC_get", (swig_wrapper_func) _wrap_CCameraIO_m_SkipC_get, NULL},
    { SWIG_prefix "CCameraIO_m_SkipR_set", (swig_wrapper_func) _wrap_CCameraIO_m_SkipR_set, NULL},
    { SWIG_prefix "CCameraIO_m_SkipR_get", (swig_wrapper_func) _wrap_CCameraIO_m_SkipR_get, NULL},
    { SWIG_prefix "CCameraIO_m_HFlush_set", (swig_wrapper_func) _wrap_CCameraIO_m_HFlush_set, NULL},
    { SWIG_prefix "CCameraIO_m_HFlush_get", (swig_wrapper_func) _wrap_CCameraIO_m_HFlush_get, NULL},
    { SWIG_prefix "CCameraIO_m_VFlush_set", (swig_wrapper_func) _wrap_CCameraIO_m_VFlush_set, NULL},
    { SWIG_prefix "CCameraIO_m_VFlush_get", (swig_wrapper_func) _wrap_CCameraIO_m_VFlush_get, NULL},
    { SWIG_prefix "CCameraIO_m_BIC_set", (swig_wrapper_func) _wrap_CCameraIO_m_BIC_set, NULL},
    { SWIG_prefix "CCameraIO_m_BIC_get", (swig_wrapper_func) _wrap_CCameraIO_m_BIC_get, NULL},
    { SWIG_prefix "CCameraIO_m_BIR_set", (swig_wrapper_func) _wrap_CCameraIO_m_BIR_set, NULL},
    { SWIG_prefix "CCameraIO_m_BIR_get", (swig_wrapper_func) _wrap_CCameraIO_m_BIR_get, NULL},
    { SWIG_prefix "CCameraIO_m_Sensor_set", (swig_wrapper_func) _wrap_CCameraIO_m_Sensor_set, NULL},
    { SWIG_prefix "CCameraIO_m_Sensor_get", (swig_wrapper_func) _wrap_CCameraIO_m_Sensor_get, NULL},
    { SWIG_prefix "CCameraIO_m_Color_set", (swig_wrapper_func) _wrap_CCameraIO_m_Color_set, NULL},
    { SWIG_prefix "CCameraIO_m_Color_get", (swig_wrapper_func) _wrap_CCameraIO_m_Color_get, NULL},
    { SWIG_prefix "CCameraIO_m_Noise_set", (swig_wrapper_func) _wrap_CCameraIO_m_Noise_set, NULL},
    { SWIG_prefix "CCameraIO_m_Noise_get", (swig_wrapper_func) _wrap_CCameraIO_m_Noise_get, NULL},
    { SWIG_prefix "CCameraIO_m_Gain_set", (swig_wrapper_func) _wrap_CCameraIO_m_Gain_set, NULL},
    { SWIG_prefix "CCameraIO_m_Gain_get", (swig_wrapper_func) _wrap_CCameraIO_m_Gain_get, NULL},
    { SWIG_prefix "CCameraIO_m_PixelXSize_set", (swig_wrapper_func) _wrap_CCameraIO_m_PixelXSize_set, NULL},
    { SWIG_prefix "CCameraIO_m_PixelXSize_get", (swig_wrapper_func) _wrap_CCameraIO_m_PixelXSize_get, NULL},
    { SWIG_prefix "CCameraIO_m_PixelYSize_set", (swig_wrapper_func) _wrap_CCameraIO_m_PixelYSize_set, NULL},
    { SWIG_prefix "CCameraIO_m_PixelYSize_get", (swig_wrapper_func) _wrap_CCameraIO_m_PixelYSize_get, NULL},
    { SWIG_prefix "CCameraIO_Reset", (swig_wrapper_func) _wrap_CCameraIO_Reset, NULL},
    { SWIG_prefix "CCameraIO_Flush", (swig_wrapper_func) _wrap_CCameraIO_Flush, NULL},
    { SWIG_prefix "CCameraIO_AuxOutput", (swig_wrapper_func) _wrap_CCameraIO_AuxOutput, NULL},
    { SWIG_prefix "CCameraIO_RegWrite", (swig_wrapper_func) _wrap_CCameraIO_RegWrite, NULL},
    { SWIG_prefix "CCameraIO_RegRead", (swig_wrapper_func) _wrap_CCameraIO_RegRead, NULL},
    { SWIG_prefix "CCameraIO_FilterHome", (swig_wrapper_func) _wrap_CCameraIO_FilterHome, NULL},
    { SWIG_prefix "CCameraIO_FilterSet", (swig_wrapper_func) _wrap_CCameraIO_FilterSet, NULL},
    { SWIG_prefix "CCameraIO_Expose", (swig_wrapper_func) _wrap_CCameraIO_Expose, NULL},
    { SWIG_prefix "CCameraIO_GetImage", (swig_wrapper_func) _wrap_CCameraIO_GetImage, NULL},
    { SWIG_prefix "CCameraIO_BufferImage", (swig_wrapper_func) _wrap_CCameraIO_BufferImage, NULL},
    { SWIG_prefix "CCameraIO_DigitizeLine", (swig_wrapper_func) _wrap_CCameraIO_DigitizeLine, NULL},
    { SWIG_prefix "CCameraIO_GetLine", (swig_wrapper_func) _wrap_CCameraIO_GetLine, NULL},
    { SWIG_prefix "CCameraIO_BufferDriftScan", (swig_wrapper_func) _wrap_CCameraIO_BufferDriftScan, NULL},
    { SWIG_prefix "CCameraIO_Snap", (swig_wrapper_func) _wrap_CCameraIO_Snap, NULL},
    { SWIG_prefix "CCameraIO_m_TDI_set", (swig_wrapper_func) _wrap_CCameraIO_m_TDI_set, NULL},
    { SWIG_prefix "CCameraIO_m_TDI_get", (swig_wrapper_func) _wrap_CCameraIO_m_TDI_get, NULL},
    { SWIG_prefix "CCameraIO_m_WaitingforTrigger_set", (swig_wrapper_func) _wrap_CCameraIO_m_WaitingforTrigger_set, NULL},
    { SWIG_prefix "CCameraIO_m_WaitingforTrigger_get", (swig_wrapper_func) _wrap_CCameraIO_m_WaitingforTrigger_get, NULL},
    { SWIG_prefix "CCameraIO_m_WaitingforImage_set", (swig_wrapper_func) _wrap_CCameraIO_m_WaitingforImage_set, NULL},
    { SWIG_prefix "CCameraIO_m_WaitingforImage_get", (swig_wrapper_func) _wrap_CCameraIO_m_WaitingforImage_get, NULL},
    { SWIG_prefix "CCameraIO_m_WaitingforLine_set", (swig_wrapper_func) _wrap_CCameraIO_m_WaitingforLine_set, NULL},
    { SWIG_prefix "CCameraIO_m_WaitingforLine_get", (swig_wrapper_func) _wrap_CCameraIO_m_WaitingforLine_get, NULL},
    { SWIG_prefix "CCameraIO_m_RegisterOffset_set", (swig_wrapper_func) _wrap_CCameraIO_m_RegisterOffset_set, NULL},
    { SWIG_prefix "CCameraIO_m_RegisterOffset_get", (swig_wrapper_func) _wrap_CCameraIO_m_RegisterOffset_get, NULL},
    { SWIG_prefix "CCameraIO_m_FilterPosition_set", (swig_wrapper_func) _wrap_CCameraIO_m_FilterPosition_set, NULL},
    { SWIG_prefix "CCameraIO_m_FilterPosition_get", (swig_wrapper_func) _wrap_CCameraIO_m_FilterPosition_get, NULL},
    { SWIG_prefix "CCameraIO_m_FilterStepPos_set", (swig_wrapper_func) _wrap_CCameraIO_m_FilterStepPos_set, NULL},
    { SWIG_prefix "CCameraIO_m_FilterStepPos_get", (swig_wrapper_func) _wrap_CCameraIO_m_FilterStepPos_get, NULL},
    { SWIG_prefix "CCameraIO_m_Shutter_set", (swig_wrapper_func) _wrap_CCameraIO_m_Shutter_set, NULL},
    { SWIG_prefix "CCameraIO_m_Shutter_get", (swig_wrapper_func) _wrap_CCameraIO_m_Shutter_get, NULL},
    { SWIG_prefix "CCameraIO_m_Status_set", (swig_wrapper_func) _wrap_CCameraIO_m_Status_set, NULL},
    { SWIG_prefix "CCameraIO_m_Status_get", (swig_wrapper_func) _wrap_CCameraIO_m_Status_get, NULL},
    { SWIG_prefix "CCameraIO_m_Interface_set", (swig_wrapper_func) _wrap_CCameraIO_m_Interface_set, NULL},
    { SWIG_prefix "CCameraIO_m_Interface_get", (swig_wrapper_func) _wrap_CCameraIO_m_Interface_get, NULL},
    { SWIG_prefix "CCameraIO_m_SensorType_set", (swig_wrapper_func) _wrap_CCameraIO_m_SensorType_set, NULL},
    { SWIG_prefix "CCameraIO_m_SensorType_get", (swig_wrapper_func) _wrap_CCameraIO_m_SensorType_get, NULL},
    { SWIG_prefix "CCameraIO_m_CoolerStatus_set", (swig_wrapper_func) _wrap_CCameraIO_m_CoolerStatus_set, NULL},
    { SWIG_prefix "CCameraIO_m_CoolerStatus_get", (swig_wrapper_func) _wrap_CCameraIO_m_CoolerStatus_get, NULL},
    { SWIG_prefix "CCameraIO_m_IRQMask_set", (swig_wrapper_func) _wrap_CCameraIO_m_IRQMask_set, NULL},
    { SWIG_prefix "CCameraIO_m_IRQMask_get", (swig_wrapper_func) _wrap_CCameraIO_m_IRQMask_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureBinX_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureBinX_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureBinX_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureBinX_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureBinY_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureBinY_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureBinY_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureBinY_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureStartX_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureStartX_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureStartX_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureStartX_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureStartY_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureStartY_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureStartY_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureStartY_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureNumX_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureNumX_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureNumX_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureNumX_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureNumY_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureNumY_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureNumY_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureNumY_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureColumns_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureColumns_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureColumns_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureColumns_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureRows_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureRows_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureRows_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureRows_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureSkipC_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureSkipC_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureSkipC_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureSkipC_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureSkipR_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureSkipR_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureSkipR_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureSkipR_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureHFlush_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureHFlush_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureHFlush_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureHFlush_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureVFlush_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureVFlush_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureVFlush_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureVFlush_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureBIC_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureBIC_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureBIC_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureBIC_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureBIR_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureBIR_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureBIR_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureBIR_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureAIC_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureAIC_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureAIC_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureAIC_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureRemainingLines_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureRemainingLines_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureRemainingLines_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureRemainingLines_get, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureAIR_set", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureAIR_set, NULL},
    { SWIG_prefix "CCameraIO_m_ExposureAIR_get", (swig_wrapper_func) _wrap_CCameraIO_m_ExposureAIR_get, NULL},
    { SWIG_prefix "CCameraIO_m_RegShadow_set", (swig_wrapper_func) _wrap_CCameraIO_m_RegShadow_set, NULL},
    { SWIG_prefix "CCameraIO_m_RegShadow_get", (swig_wrapper_func) _wrap_CCameraIO_m_RegShadow_get, NULL},
    { SWIG_prefix "CCameraIO_m_FastShutterBits_Mode_set", (swig_wrapper_func) _wrap_CCameraIO_m_FastShutterBits_Mode_set, NULL},
    { SWIG_prefix "CCameraIO_m_FastShutterBits_Mode_get", (swig_wrapper_func) _wrap_CCameraIO_m_FastShutterBits_Mode_get, NULL},
    { SWIG_prefix "CCameraIO_m_FastShutterBits_Test_set", (swig_wrapper_func) _wrap_CCameraIO_m_FastShutterBits_Test_set, NULL},
    { SWIG_prefix "CCameraIO_m_FastShutterBits_Test_get", (swig_wrapper_func) _wrap_CCameraIO_m_FastShutterBits_Test_get, NULL},
    { SWIG_prefix "CCameraIO_LoadLineCounter", (swig_wrapper_func) _wrap_CCameraIO_LoadLineCounter, NULL},
    { SWIG_prefix "CCameraIO_LoadColumnLayout", (swig_wrapper_func) _wrap_CCameraIO_LoadColumnLayout, NULL},
    { SWIG_prefix "CCameraIO_LoadTimerAndBinning", (swig_wrapper_func) _wrap_CCameraIO_LoadTimerAndBinning, NULL},
    { SWIG_prefix "CCameraIO_StartFlushing", (swig_wrapper_func) _wrap_CCameraIO_StartFlushing, NULL},
    { SWIG_prefix "CCameraIO_StopFlushing", (swig_wrapper_func) _wrap_CCameraIO_StopFlushing, NULL},
    { SWIG_prefix "CCameraIO_InitDefaults", (swig_wrapper_func) _wrap_CCameraIO_InitDefaults, NULL},
    { SWIG_prefix "CCameraIO", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_CCameraIO},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_CCameraIO[] = {{"_p_CCameraIO", 0, "CCameraIO *", &_wrap_class_CCameraIO},{"_p_CCameraIO"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_CCameraIO, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
return TCL_OK;
}

